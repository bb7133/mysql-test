# WL#883 Non-recursive WITH clause (common table expression)
flush status;
create table t1(a int, b int, c int);
insert into t1 values(null,null,null),(2,3,4);
WITH qn AS (SELECT a FROM t1)
SELECT 1 FROM dual;
1
1
# two query names
WITH qn AS (SELECT a FROM t1), qn2 as (select b from t1)
SELECT 1 FROM dual;
1
1
# duplicate query names
WITH qn AS (SELECT a FROM t1), qn as (select b from t1)
SELECT 1 FROM qn;
Error 1066: Not unique table/alias: '%-.192s'
#  multiple refs
WITH qn AS (SELECT b as a FROM t1)
SELECT qn.a, qn2.a  FROM qn, qn as qn2;
a	a
NULL	NULL
NULL	3
3	NULL
3	3
WITH qn AS (SELECT b as a FROM t1),
qn2 AS (SELECT c FROM t1 WHERE a IS NULL or a>0)
SELECT qn.a, qn2.c  FROM qn, qn2;
a	c
NULL	NULL
NULL	4
3	NULL
3	4
# qn2 ref qn:
WITH qn AS (SELECT 10*a as a FROM t1),
qn2 AS (SELECT 3*a FROM qn)
SELECT * from qn2;
3*a
NULL
60
WITH qn AS (SELECT a FROM t1), qn2 AS (SELECT a FROM qn)
SELECT * from qn2;
a
NULL
2
# forward ref (should error)
WITH qn2 AS (SELECT a FROM qn WHERE a IS NULL or a>0),
qn AS (SELECT b as a FROM t1)
SELECT qn2.a  FROM qn2;
Error 1146: Table 'with_non_recursive.qn' doesn't exist
with qn1 as (with qn3 as (select * from qn2) select * from qn3),
qn2 as (select 1)
select * from qn1;
Error 1146: Table 'with_non_recursive.qn2' doesn't exist
# This is valid; it is to test moving boundaries.
# When we resolve qn3, resolving qn1 moves the right bound to
# qn0, but the bound is properly restored so that we can later
# resolve qn2.
with qn0 as (select 1), qn1 as (select * from qn0), qn2 as (select 1), qn3 as (select 1 from qn1, qn2) select 1 from qn3;
1
1
# No ref
with qn as (select 1) select 2;
2
2
# circular ref
WITH qn2 AS (SELECT a FROM qn WHERE a IS NULL or a>0),
qn AS (SELECT b as a FROM qn2)
SELECT qn.a  FROM qn;
Error 1146: Table 'with_non_recursive.qn' doesn't exist
# recursive
WITH qn AS (SELECT a FROM qn)
SELECT qn.a FROM qn;
Error 1146: Table 'with_non_recursive.qn' doesn't exist
WITH qn1 AS (SELECT a FROM qn3),
qn2 AS (SELECT a FROM qn1),
qn3 AS (SELECT a FROM t1),
qn4 AS (SELECT a FROM qn2)
SELECT a FROM qn4;
Error 1146: Table 'with_non_recursive.qn3' doesn't exist
# ref from subq
with qn as (select * from t1) select (select max(a) from qn);
(select max(a) from qn)
2
# QN defined in subq
# WITH in WITH
with qn as
(with qn2 as (select "qn2" as a from t1) select "qn", a from qn2)
select * from qn;
qn	a
qn	qn2
qn	qn2
# outer ref to a table, placed in a QN in a subq (later)
# outer ref to a QN, placed in a QN in a subq
# QN defined in view
CREATE VIEW v AS
WITH qn AS (SELECT 10*a as a FROM t1),
qn2 AS (SELECT 3*a AS b FROM qn)
SELECT * from qn2;
SELECT * FROM v;
b
NULL
60
DROP VIEW v;
# CREATE INSERT SELECT
# Double use of QN in two subqueries.
# when QN, when table.
create table qn(c1 varchar(100));
insert into qn values("base");
select * from qn;
c1
base
with qn as (select "with") select * from qn;
with
with
# In a non-recursive WITH, the scope of the QN doesn't extend to its
# subquery, so "qn" inside AS() is the base table.
WITH qn AS (select * from qn) select * from qn;
c1
base
# View doesn't look out to external QNs
create view v as select * from qn;
select * from v;
c1
base
with qn as (select "with") select * from v;
c1
base
with qn as (select * from v) select * from qn;
c1
base
# Even if the base table is temporarily dropped
drop table qn;
with qn as (select "with") select * from v;
Error 1356: View 'with_non_recursive.v' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
with qn as (select * from v) select * from qn;
Error 1356: View 'with_non_recursive.v' references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them
# QN shadows tmp table
create table qn(a varchar(100));
insert into qn values("tmp");
select * from qn;
a
tmp
with qn as (select "with") select * from qn;
with
with
drop view v;
# DT shadows QN:
with qn as (select "with") select * from (select "dt") as qn;
dt
dt
# QN of subq shadows outer QN
WITH qn AS (select "outer" as a)
SELECT (WITH qn AS (SELECT "inner" as a) SELECT a from qn),
qn.a
FROM qn;
(WITH qn AS (SELECT "inner" as a) SELECT a from qn)	a
inner	outer
# Qualified name isn't allowed after WITH:
with test.qn as (select "with") select * from test.qn;
[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 10 near ".qn as (select "with") select * from test.qn;" 
# Adding a db. prefix to a field still resolves to the QN; it's a bit awkward as
# the QN doesn't belong to a db, but it's the same with derived table:
# OTOH, db. prefix in FROM doesn't resolve to QN, which is good
with qn as (select "with") select * from qn;
with
with
with qn as (select "with" as a) select a from qn;
a
with
with qn as (select "with" as a) select qn.a from qn;
a
with
drop table qn;
# Unions
WITH qn AS (SELECT b as a FROM t1 UNION SELECT b+5 FROM t1),
qn2 AS (SELECT a FROM qn WHERE a IS NULL or a>0)
SELECT qn.a FROM qn
UNION SELECT qn2.a FROM qn2 WHERE qn2.a>3;
a
NULL
3
8
# No double WITH
with qn as (select "with" as a)
with qn2 as (select "with" as a)
select a from test.qn;
[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 2 column 5 near "with qn2 as (select "with" as a)
select a from test.qn;" 
# with comma
with qn as (select "with" as a),
with qn2 as (select "with" as a)
select a from test.qn;
[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 2 column 5 near "with qn2 as (select "with" as a)
select a from test.qn;" 
# ORDER BY removed unless there is LIMIT or single table (check "Using filesort")
with qn as (select a from t1 order by 1)
select a from qn;
a
NULL
2
with qn as (select a from t1 order by 1)
select qn.a from qn, t1 as t2;
a
NULL
NULL
2
2
with qn as (select a from t1 order by 1 limit 10)
select qn.a from qn, t1 as t2;
a
2
NULL
2
NULL
# Merge hint
# FD detection
with qn as (select a, b from t1 where a=b)
select b from qn group by a;
b
with qn as (select a, sum(b) as s from t1 group by a)
select s from qn group by a;
s
NULL
3
# CTEs work if used in SET
set @myvar=
(with qn as (select a, sum(b) as s from t1 group by a)
select s from qn group by a having s is not null);
select @myvar;
@myvar
3
# CTE works with semijoin
# Column names
# empty list
with qn () as (select 1) select * from qn, qn qn1;
[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 10 near ") as (select 1) select * from qn, qn qn1;" 
# Materialization
with qn (foo, bar) as (select 1) select * from qn, qn qn1;
Error 1353: In definition of view, derived table or common table expression, SELECT list and column names list have different column counts
with qn (foo, bar) as (select 1, 2 from t1 limit 2) select * from qn, qn qn1;
foo	bar	foo	bar
1	2	1	2
1	2	1	2
1	2	1	2
1	2	1	2
with qn (foo, bar) as (select 1 as col, 2 as coll from t1 limit 2) select * from qn, qn qn1;
foo	bar	foo	bar
1	2	1	2
1	2	1	2
1	2	1	2
1	2	1	2
with qn (foo, bar) as (select 1 as col, 2 as coll union
select a,b from t1) select qn1.bar from qn qn1;
bar
NULL
2
3
with qn (foo, bar) as (select a, b from t1 limit 2) select qn.bar,foo from qn;
bar	foo
NULL	NULL
3	2
# Merge
with qn (foo, bar) as (select 1, 2 from t1) select * from qn, qn qn1;
foo	bar	foo	bar
1	2	1	2
1	2	1	2
1	2	1	2
1	2	1	2
with qn (foo, bar) as (select 1 as col, 2 as coll from t1) select * from qn, qn qn1;
foo	bar	foo	bar
1	2	1	2
1	2	1	2
1	2	1	2
1	2	1	2
with qn (foo, bar) as (select a, b from t1) select qn1.bar,foo from qn qn1;
bar	foo
NULL	NULL
3	2
# Disambiguates same-name expressions
with qn as (select 1,1) select * from qn;
Error 1060: Duplicate column name '1'
with qn (foo, bar) as (select 1,1) select * from qn;
foo	bar
1	1
with qn as (select 1,1 from t1) select * from qn;
Error 1060: Duplicate column name '1'
with qn (foo, bar) as (select 1,1 from t1) select * from qn;
foo	bar
1	1
1	1
# Duplicate names are forbidden
with qn (foo, foo) as (select 1,2) select * from qn;
Error 1060: Duplicate column name 'foo'
# Column names for QN/DT are printed
create view v1 as
with qn (foo, bar) as (select 1,1) select * from qn;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v1` (`foo`, `bar`) AS WITH `qn` (`foo`, `bar`) AS (SELECT 1 AS `1`,1 AS `1`) SELECT `with_non_recursive`.`qn`.`foo` AS `foo`,`with_non_recursive`.`qn`.`bar` AS `bar` FROM `qn`	utf8mb4	utf8mb4_general_ci
show fields from v1;
Field	Type	Null	Key	Default	Extra
foo	bigint(1)	YES		NULL	
bar	bigint(1)	YES		NULL	
select * from v1;
foo	bar
1	1
drop view v1;
create view v1 as
select * from (select 1 foo,1 bar) dt;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v1` (`foo`, `bar`) AS SELECT `dt`.`foo` AS `foo`,`dt`.`bar` AS `bar` FROM (SELECT 1 AS `foo`,1 AS `bar`) AS `dt`	utf8mb4	utf8mb4_general_ci
select * from v1;
foo	bar
1	1
drop view v1;
create view v1 as
with qn (foo, bar) as (select 1,1 from t1) select * from qn;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v1` (`foo`, `bar`) AS WITH `qn` (`foo`, `bar`) AS (SELECT 1 AS `1`,1 AS `1` FROM `with_non_recursive`.`t1`) SELECT `with_non_recursive`.`qn`.`foo` AS `foo`,`with_non_recursive`.`qn`.`bar` AS `bar` FROM `qn`	utf8mb4	utf8mb4_general_ci
select * from v1;
foo	bar
1	1
1	1
drop view v1;
create view v1 as
select * from (select 1 foo,1 bar from t1) dt;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v1` (`foo`, `bar`) AS SELECT `dt`.`foo` AS `foo`,`dt`.`bar` AS `bar` FROM (SELECT 1 AS `foo`,1 AS `bar` FROM `with_non_recursive`.`t1`) AS `dt`	utf8mb4	utf8mb4_general_ci
select * from v1;
foo	bar
1	1
1	1
drop view v1;
# printing with back-quoting is necessary, when using a
# reserved word as column name.
create view v1 as
select * from (select 1 `select`) dt;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `v1` (`select`) AS SELECT `dt`.`select` AS `select` FROM (SELECT 1 AS `select`) AS `dt`	utf8mb4	utf8mb4_general_ci
select * from v1;
select
1
drop view v1;
create view v1 (bar) as
select 1, 2 from t1;
Error 1353: In definition of view, derived table or common table expression, SELECT list and column names list have different column counts
drop table t1;
# Prove that a materialized QN is shared among all references:
create table t1(a int);
insert into t1 values(1),(2),(3),(4);
flush status;
with qn as (select 123 as col)
select * from qn;
col
123
flush status;
with qn as (select 123 as col)
select * from qn, qn as qn1;
col	col
123	123
create view qn as select 123 as col;
flush status;
select * from qn, qn as qn1;
col	col
123	123
drop view qn;
drop table t1;
# Printing of merged/materialized QN, with or without alias
create table t1 (a int);
drop table t1;
# Automatic index creation if materialized
create table t1 (a int);
insert into t1(a) values (1),(2),(3),(4),(5),(6),(7),(8),(9),(0);
analyze table t1;
flush status;
# Should use auto_key0 and ref access.
flush status;
# With two references
drop table t1;
# Must not create more than 64 indexes.
(select max(c1) from qn where qn.c1=1)	(select max(c2) from qn where qn.c2=1)	(select max(c3) from qn where qn.c3=1)	(select max(c4) from qn where qn.c4=1)	(select max(c5) from qn where qn.c5=1)	(select max(c6) from qn where qn.c6=1)	(select max(c7) from qn where qn.c7=1)	(select max(c8) from qn where qn.c8=1)	(select max(c9) from qn where qn.c9=1)	(select max(c10) from qn where qn.c10=1)	(select max(c11) from qn where qn.c11=1)	(select max(c12) from qn where qn.c12=1)	(select max(c13) from qn where qn.c13=1)	(select max(c14) from qn where qn.c14=1)	(select max(c15) from qn where qn.c15=1)	(select max(c16) from qn where qn.c16=1)	(select max(c17) from qn where qn.c17=1)	(select max(c18) from qn where qn.c18=1)	(select max(c19) from qn where qn.c19=1)	(select max(c20) from qn where qn.c20=1)	(select max(c21) from qn where qn.c21=1)	(select max(c22) from qn where qn.c22=1)	(select max(c23) from qn where qn.c23=1)	(select max(c24) from qn where qn.c24=1)	(select max(c25) from qn where qn.c25=1)	(select max(c26) from qn where qn.c26=1)	(select max(c27) from qn where qn.c27=1)	(select max(c28) from qn where qn.c28=1)	(select max(c29) from qn where qn.c29=1)	(select max(c30) from qn where qn.c30=1)	(select max(c31) from qn where qn.c31=1)	(select max(c32) from qn where qn.c32=1)	(select max(c33) from qn where qn.c33=1)	(select max(c34) from qn where qn.c34=1)	(select max(c35) from qn where qn.c35=1)	(select max(c36) from qn where qn.c36=1)	(select max(c37) from qn where qn.c37=1)	(select max(c38) from qn where qn.c38=1)	(select max(c39) from qn where qn.c39=1)	(select max(c40) from qn where qn.c40=1)	(select max(c41) from qn where qn.c41=1)	(select max(c42) from qn where qn.c42=1)	(select max(c43) from qn where qn.c43=1)	(select max(c44) from qn where qn.c44=1)	(select max(c45) from qn where qn.c45=1)	(select max(c46) from qn where qn.c46=1)	(select max(c47) from qn where qn.c47=1)	(select max(c48) from qn where qn.c48=1)	(select max(c49) from qn where qn.c49=1)	(select max(c50) from qn where qn.c50=1)	(select max(c51) from qn where qn.c51=1)	(select max(c52) from qn where qn.c52=1)	(select max(c53) from qn where qn.c53=1)	(select max(c54) from qn where qn.c54=1)	(select max(c55) from qn where qn.c55=1)	(select max(c56) from qn where qn.c56=1)	(select max(c57) from qn where qn.c57=1)	(select max(c58) from qn where qn.c58=1)	(select max(c59) from qn where qn.c59=1)	(select max(c60) from qn where qn.c60=1)	(select max(c61) from qn where qn.c61=1)	(select max(c62) from qn where qn.c62=1)	(select max(c63) from qn where qn.c63=1)	(select max(c64) from qn where qn.c64=1)	(select max(c65) from qn where qn.c65=1)	(select max(c66) from qn where qn.c66=1)	(select max(c67) from qn where qn.c67=1)	(select max(c68) from qn where qn.c68=1)	(select max(c69) from qn where qn.c69=1)	(select max(c70) from qn where qn.c70=1)	(select max(c71) from qn where qn.c71=1)	(select max(c72) from qn where qn.c72=1)	(select max(c73) from qn where qn.c73=1)	(select max(c74) from qn where qn.c74=1)	(select max(c75) from qn where qn.c75=1)	(select max(c76) from qn where qn.c76=1)	(select max(c77) from qn where qn.c77=1)	(select max(c78) from qn where qn.c78=1)	(select max(c79) from qn where qn.c79=1)	(select max(c80) from qn where qn.c80=1)	(select max(c81) from qn where qn.c81=1)	(select max(c82) from qn where qn.c82=1)	(select max(c83) from qn where qn.c83=1)	(select max(c84) from qn where qn.c84=1)	(select max(c85) from qn where qn.c85=1)	(select max(c86) from qn where qn.c86=1)	(select max(c87) from qn where qn.c87=1)	(select max(c88) from qn where qn.c88=1)	(select max(c89) from qn where qn.c89=1)	(select max(c90) from qn where qn.c90=1)	(select max(c91) from qn where qn.c91=1)	(select max(c92) from qn where qn.c92=1)	(select max(c93) from qn where qn.c93=1)	(select max(c94) from qn where qn.c94=1)	(select max(c95) from qn where qn.c95=1)	(select max(c96) from qn where qn.c96=1)	(select max(c97) from qn where qn.c97=1)	(select max(c98) from qn where qn.c98=1)	(select max(c99) from qn where qn.c99=1)	(select max(c100) from qn where qn.c100=1)
NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL	NULL
drop table t;
# Choice between two auto_key:
create table t1(a int, b int);
insert into t1 values (null, 6), (null, 10);
# Test the covering key; note that MEMORY doesn't use a
# covering key (always reads the "data file"). But InnoDB does.
drop table t1;
# QN referencing view of same name isn't a "recursive view",
# shouldn't cause ER_VIEW_RECURSIVE
create view v1 as select "with";
with v1 as (select * from v1) select * from v1;
with
with
drop view v1;
# QN inside view
create view v1 as
with qn as (select 1 as col) select * from qn;
select * from v1;
col
1
drop view v1;
create table t1(a int, b int);
# Alas merge hints are ignored in views (filed Bug#23017428)
create view v1 as
with qn as (select a from t1),
qn2 as (select b from t1)
select /*+ merge(qn) no_merge(qn2) */ qn.a,qn2.b from qn, qn2;
drop view v1;
# Materializing view doesn't impose materializing query name
create algorithm=temptable view v1 as
with qn as (select a from t1)
select qn.a  from qn;
drop view v1;
drop table t1;
# CTE referenced four times, including in subqueries in other CTEs
create table sales_days(day_of_sale DATE, amount INT);
insert into sales_days values
('2015-01-02', 100), ('2015-01-05', 200),
('2015-02-02', 10),  ('2015-02-10', 100),
('2015-03-02', 10),  ('2015-03-18', 1);
with sales_by_month(month,total) as
(select month(day_of_sale), sum(amount) from sales_days
where year(day_of_sale)=2015
group by month(day_of_sale)),
best_month(month, total, award) as
(select month, total, "best" from sales_by_month
where total=(select max(total) from sales_by_month)),
worst_month(month, total, award) as
(select month, total, "worst" from sales_by_month
where total=(select min(total) from sales_by_month))
select * from best_month union all select * from worst_month;
month	total	award
1	300	best
3	11	worst
drop table sales_days;
# Special parser command not allowed to users.
parse_cte ( select 1 ) ;
[parser:1064]You have an error in your SQL syntax; check the manual that corresponds to your TiDB version for the right syntax to use line 1 column 9 near "parse_cte ( select 1 ) ;" 
# Query names are a partial workaround to the problem that
# user-created temp tables can't be referenced twice.
# the workaround works if the temp table's life is necessary
# only for a single statement:
with qn as (select 1) select * from qn, qn qn1;
1	1
1	1
# If the tmp table is necessary, wrapping it in a query name doesn't
# help:
with qn as (select * from tmp) select /*+ merge(qn,qn1) */ * from qn, qn qn1;
Error 1146: Table 'with_non_recursive.tmp' doesn't exist
with qn as (select * from tmp) select /*+ no_merge(qn,qn1) */ * from qn, qn qn1;
Error 1146: Table 'with_non_recursive.tmp' doesn't exist
# Using a query name in UPDATE
create table t1(a int, b int);
insert into t1 values(1,2),(3,4);
create table t2 (a int, b int);
insert into t1 values(1,2),(3,4);
set autocommit=0;
# Multi-table syntax
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
# Two references to query name
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
# Single-table syntax
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
# Using a query name in DELETE
# Multi-table syntax
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
# Single-table syntax
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
select * from t1;
a	b
1	2
3	4
1	2
3	4
rollback;
drop table t1,t2;
set autocommit=default;
# No default db
select database();
database()
with_non_recursive
create database mysqltest1;
use mysqltest1;
drop database mysqltest1;
select database();
database()
NULL
with qn as (select 1) select * from qn;
1
1
# Back to usual db 'test'
use test;
