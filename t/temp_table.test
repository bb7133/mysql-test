#
# Test of temporary tables
#

--disable_warnings
drop table if exists t1,t2;
drop view if exists v1;
--enable_warnings

CREATE TABLE t1 (c int not null, d char (10) not null);
insert into t1 values(1,""),(2,"a"),(3,"b");
CREATE TEMPORARY TABLE t1 (a int not null, b char (10) not null);
insert into t1 values(4,"e"),(5,"f"),(6,"g");
CREATE TABLE t2 (x int not null, y int not null);
select * from t1;
create TEMPORARY TABLE t2 (c int not null, d char (10) not null);
insert into t2 select * from t1;
--disable_warnings
create TEMPORARY TABLE IF NOT EXISTS t2 (a int);
--enable_warnings
select * from t2;

# This should give errors
--error 1050
CREATE TEMPORARY TABLE t1 (a int not null, b char (10) not null);
--error 8200
ALTER TABLE t1 RENAME t2;

drop table t1,t2;
drop table t1,t2;

#
# Test CONCAT_WS with temporary tables
#

CREATE TEMPORARY TABLE t1 (pkCrash INTEGER PRIMARY KEY,strCrash VARCHAR(255));
INSERT INTO t1 ( pkCrash, strCrash ) VALUES ( 1, '1');
SELECT CONCAT_WS(pkCrash, strCrash) FROM t1;
drop table t1;

#
# Problem with ELT
#
create temporary table t1 (id int(10) not null unique);
create temporary table t2 (id int(10) not null primary key,
val int(10) not null);

# put in some initial values
insert into t1 values (1),(2),(4);
insert into t2 values (1,1),(2,1),(3,1),(4,2);

# do a query using ELT, a join and an ORDER BY.
select one.id, two.val, elt(two.val,'one','two') from t1 one, t2 two where two.id=one.id order by one.id;
drop table t1,t2;

# Fix for BUG#8921: Check that temporary table is ingored by view commands.
create temporary table v1 (A varchar(64));
insert into v1 values('This is temp. table');
create view v1 as select 'This is view' A;
select * from v1;
show create table v1;
show create view v1;
drop view v1;
select * from v1;
create view v1 as select 'This is view again' A;
select * from v1;
drop table v1;
select * from v1;
drop view v1;

#
# BUG#21096: locking issue ; temporary table conflicts.
#
# The problem was that on DROP TEMPORARY table name lock was acquired,
# which should not be done.
#
--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (i INT);

LOCK TABLE t1 WRITE;

connect (conn1, localhost, root,,test);

CREATE TEMPORARY TABLE t1 (i INT);

--echo The following command should not block
DROP TEMPORARY TABLE t1;

disconnect conn1;
connection default;

DROP TABLE t1;

#
# Check that it's not possible to drop a base table with
# DROP TEMPORARY statement.
#
CREATE TABLE t1 (i INT);
CREATE TEMPORARY TABLE t2 (i INT);

--error 1051
DROP TEMPORARY TABLE t2, t1;

# Table t2 should be still there too.
SELECT * FROM t2;
# But table t1 should still be there.
SELECT * FROM t1;

DROP TABLE t1;

#
# Test truncate with temporary tables
#

create temporary table t1 (a int);
insert into t1 values (4711);
select * from t1;
truncate t1;
insert into t1 values (42);
select * from t1;
drop table t1;

#
# Bug #35392: Delete all statement does not execute properly after
# few delete statements
#
CREATE TEMPORARY TABLE t1(a INT, b VARCHAR(20));
INSERT INTO t1 VALUES(1, 'val1'), (2, 'val2'), (3, 'val3');
DELETE FROM t1 WHERE a=1;
SELECT count(*) FROM t1;
DELETE FROM t1;
SELECT * FROM t1;
DROP TABLE t1;

--echo #
--echo # Bug #48067: A temp table with the same name as an existing table,
--echo #             makes drop database fail.
--echo #
--disable_warnings
DROP TEMPORARY TABLE IF EXISTS bug48067.t1;
DROP DATABASE IF EXISTS bug48067;
--enable_warnings
CREATE DATABASE bug48067;
CREATE TABLE bug48067.t1 (c1 int);
INSERT INTO bug48067.t1 values (1);
CREATE TEMPORARY TABLE bug48067.t1 (c1 int);
DROP DATABASE bug48067;
DROP TEMPORARY table bug48067.t1;

--echo End of 5.1 tests

--echo #
--echo # Test that admin statements work for temporary tables.
--echo #
--disable_warnings
DROP TABLE IF EXISTS t1,t2;
--enable_warnings
CREATE TEMPORARY TABLE t1(a INT);
CREATE TEMPORARY TABLE t2(b INT);
CREATE TEMPORARY TABLE t3(c INT);

INSERT INTO t1 VALUES (1), (2), (3);
INSERT INTO t2 VALUES (11), (12), (13);
INSERT INTO t3 VALUES (101), (102), (103);

--disable_warnings
ANALYZE TABLE t1, t2, t3;
--enable_warnings

DROP TABLES t1, t2, t3;

--echo #
--echo # OPERATING A TEMPORARY TABLE IN A NON-EXISTENT SCHEMA
--echo #              
--echo #

--echo # Creating a temporary table in a non-existent schema is now disallowed
--error 1049
CREATE TEMPORARY TABLE bogus.t1(a INT);

CREATE SCHEMA bogus;
CREATE TEMPORARY TABLE bogus.t1(a INT);
CREATE TEMPORARY TABLE bogus.t2(a INT);
DROP SCHEMA bogus;

--echo # Dropping a schema does not delete temporary tables, so they can
--echo # still be selected from.
SELECT * FROM bogus.t1;

--echo # ... but they can dropped using DROP TEMPORARY TABLE.
DROP TEMPORARY TABLE bogus.t1;

--echo # ... or ordinary DROP TABLE.
DROP TABLE bogus.t2;

--error 1049
SELECT * FROM bogus.t1;

--error 1049
SELECT * FROM bogus.t2;

--echo #
--echo # Bug#25951134: MEMORY LEAK OF INTERNAL TEMPORARY TABLES
--echo #

CREATE TABLE t1(a LONGTEXT);

SELECT (EXISTS (SELECT 1 FROM t1
GROUP BY (NOT EXISTS (SELECT 1 FROM (SELECT 1 FROM t1 GROUP BY a)r))))
FROM t1;

DROP TABLE t1;

--echo #
--echo # Bug #30716037 MEMORY CORRUPTION BUG IN MYSQLD
--echo #

# The original bug report.
CREATE TEMPORARY TABLE v0 ( v1 INT UNIQUE ) ;
--error 3636

WITH RECURSIVE v0 ( v1 ) AS ( SELECT -128 UNION SELECT v1 + 33 FROM v0 )
SELECT 'x' , -1 , 54703121.000000 FROM v0 AS v3 , v0 AS v2 , v0 NATURAL JOIN
v0 AS v5 NATURAL JOIN v0 AS v4 ;

DROP TABLE v0;

# Simplified version of the above.
# It should not crash. It should not return "Empty set".
# It should report an error, because v0's resursive definition produces an
# infinite set, giving raise to an infinite result set for the whole query.
--error 3636
WITH RECURSIVE v0 ( c1 ) AS (
	SELECT 0
	UNION
	SELECT c1 + 1 FROM v0
)
SELECT *
FROM
	v0,
	v0 AS v1
	NATURAL JOIN v0 AS v2;

# A finite version of the above query.
# It should not crash. It should not return "Empty set"
# It should return just 2*2=4 rows.
--sorted_result
WITH RECURSIVE v0 ( c1 ) AS (
	SELECT 0
	UNION
	SELECT 1 FROM v0
)
SELECT *
FROM
	v0,
	v0 AS v1
	NATURAL JOIN v0 AS v2;
