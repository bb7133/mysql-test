set @@session.tidb_stats_load_sync_wait=2000;
drop table if exists t1;
select (1,2,3) IN ((3,2,3), (1,2,3), (1,3,3));
(1,2,3) IN ((3,2,3), (1,2,3), (1,3,3))
1
select row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3));
row(10,2,3) IN (row(3,2,3), row(1,2,3), row(1,3,3))
0
select row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));
row(1,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3))
1
select row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3));
row(10,2,3) IN (row(3,NULL,3), row(1,2,3), row(1,3,3))
0
select row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'));
row('a',1.5,3) IN (row(1,2,3), row('a',1.5,3), row('a','a','a'))
1
select row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3));
row('a',0,3) IN (row(3,2,3), row('a','a','3'), row(1,3,3))
1
select row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3));
row('a',0,3) IN (row(3,2,3), row('a','0','3'), row(1,3,3))
1
select row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));
row('a',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3))
1
select row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3));
row('b',1.5,3) IN (row(3,NULL,3), row('a',1.5,3), row(1,3,3))
0
select row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3));
row('b',1.5,3) IN (row('b',NULL,3), row('a',1.5,3), row(1,3,3))
NULL
select row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3));
row('b',1.5,3) IN (row('b',NULL,4), row('a',1.5,3), row(1,3,3))
0
select (1,2,(3,4)) IN ((3,2,(3,4)), (1,2,(3,4)));
(1,2,(3,4)) IN ((3,2,(3,4)), (1,2,(3,4)))
1
select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,4));
Error 1241: Operand should contain 2 column(s)
select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));
row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)))
NULL
explain select row(1,2,row(3,4)) IN (row(3,2,row(3,4)), row(1,2,row(3,NULL)));
id	estRows	task	access object	operator info
Projection_3	1.00	root		<nil>->Column#1
└─TableDual_4	1.00	root		rows:1
select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)));
row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(4,5)))
0
select row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)));
row(1,2,row(3,null)) IN (row(3,2,row(3,4)), row(1,2,row(3,5)))
NULL
SELECT (1,2,3)=(0,NULL,3);
(1,2,3)=(0,NULL,3)
0
SELECT (1,2,3)=(1,NULL,3);
(1,2,3)=(1,NULL,3)
NULL
SELECT (1,2,3)=(1,NULL,0);
(1,2,3)=(1,NULL,0)
0
SELECT ROW(1,2,3)=ROW(1,2,3);
ROW(1,2,3)=ROW(1,2,3)
1
SELECT ROW(2,2,3)=ROW(1+1,2,3);
ROW(2,2,3)=ROW(1+1,2,3)
1
SELECT ROW(1,2,3)=ROW(1+1,2,3);
ROW(1,2,3)=ROW(1+1,2,3)
0
SELECT ROW(1,2,3)<ROW(1+1,2,3);
ROW(1,2,3)<ROW(1+1,2,3)
1
SELECT ROW(1,2,3)>ROW(1+1,2,3);
ROW(1,2,3)>ROW(1+1,2,3)
0
SELECT ROW(1,2,3)<=ROW(1+1,2,3);
ROW(1,2,3)<=ROW(1+1,2,3)
1
SELECT ROW(1,2,3)>=ROW(1+1,2,3);
ROW(1,2,3)>=ROW(1+1,2,3)
0
SELECT ROW(1,2,3)<>ROW(1+1,2,3);
ROW(1,2,3)<>ROW(1+1,2,3)
1
SELECT ROW(NULL,2,3)=ROW(NULL,2,3);
ROW(NULL,2,3)=ROW(NULL,2,3)
NULL
SELECT ROW(NULL,2,3)<=>ROW(NULL,2,3);
ROW(NULL,2,3)<=>ROW(NULL,2,3)
1
SELECT ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5));
ROW(1,2,ROW(3,4,5))=ROW(1,2,ROW(3,4,5))
1
SELECT ROW('test',2,3.33)=ROW('test',2,3.33);
ROW('test',2,3.33)=ROW('test',2,3.33)
1
SELECT ROW('test',2,3.33)=ROW('test',2,3.33,4);
Error 1241: Operand should contain 3 column(s)
SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33));
ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,33))
1
SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3));
ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,3))
0
SELECT ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL));
ROW('test',2,ROW(3,33))=ROW('test',2,ROW(3,NULL))
NULL
SELECT ROW('test',2,ROW(3,33))=ROW('test',2,4);
Error 1241: Operand should contain 2 column(s)
create table t1 ( a int, b int, c int);
insert into t1 values (1,2,3), (2,3,1), (3,2,1), (1,2,NULL);
select * from t1 where ROW(1,2,3)=ROW(a,b,c);
a	b	c
1	2	3
select * from t1 where ROW(0,2,3)=ROW(a,b,c);
a	b	c
select * from t1 where ROW(1,2,3)<ROW(a,b,c);
a	b	c
2	3	1
3	2	1
select ROW(a,2,3) IN(row(1,b,c), row(2,3,1)) from t1;
ROW(a,2,3) IN(row(1,b,c), row(2,3,1))
1
0
0
NULL
select ROW(c,2,3) IN(row(1,b,a), row(2,3,1)) from t1;
ROW(c,2,3) IN(row(1,b,a), row(2,3,1))
0
0
1
0
select ROW(a,b,c) IN(row(1,2,3), row(3,2,1)) from t1;
ROW(a,b,c) IN(row(1,2,3), row(3,2,1))
1
0
1
NULL
select ROW(1,2,3) IN(row(a,b,c), row(1,2,3)) from t1;
ROW(1,2,3) IN(row(a,b,c), row(1,2,3))
1
1
1
1
drop table t1;
select ROW(1,1);
Error 1241: Operand should contain 1 column(s)
create table t1 (i int);
select 1 from t1 where ROW(1,1);
Error 1241: Operand should contain 1 column(s)
select count(*) from t1 order by ROW(1,1);
Error 1241: Operand should contain 1 column(s)
select count(*) from t1 having (1,1) order by i;
Error 1241: Operand should contain 1 column(s)
drop table t1;
create table t1 (a int, b int);
insert into t1 values (1, 4);
insert into t1 values (10, 40);
insert into t1 values (1, 4);
insert into t1 values (10, 43);
insert into t1 values (1, 4);
insert into t1 values (10, 41);
insert into t1 values (1, 4);
insert into t1 values (10, 43);
insert into t1 values (1, 4);
select a, MAX(b), (1, MAX(b)) = (1, 4) from t1 group by a;
a	MAX(b)	(1, MAX(b)) = (1, 4)
1	4	1
10	43	0
drop table t1;
SELECT ROW(2,10) <=> ROW(3,4);
ROW(2,10) <=> ROW(3,4)
0
SELECT ROW(NULL,10) <=> ROW(3,NULL);
ROW(NULL,10) <=> ROW(3,NULL)
0
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,1),ROW(1,ROW(2,3)));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),ROW(1,ROW(2,2,2)));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(1,ROW(2,3,4)) IN (ROW(1,ROW(2,3,4)),ROW(1,ROW(2,2)));
Error 1241: Operand should contain 3 column(s)
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(1,ROW(2,3)) IN (ROW(1,ROW(2,3)),(SELECT 1,1),ROW(1,ROW(2,4)));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(1,ROW(2,3)) IN ((SELECT 1,1),ROW(1,ROW(2,3)));
Error 1241: Operand should contain 2 column(s)
SELECT ROW(2,1) IN (ROW(21,2),ROW(ROW(1,1,3),0));
Error 1241: Operand should contain 1 column(s)
SELECT ROW(2,1) IN (ROW(ROW(1,1,3),0),ROW(21,2));
Error 1241: Operand should contain 1 column(s)
CREATE TABLE t1(a int, b int, c int);
INSERT INTO t1 VALUES (1, 2, 3),
(NULL, 2, 3  ), (1, NULL, 3  ), (1, 2,   NULL),
(NULL, 2, 3+1), (1, NULL, 3+1), (1, 2+1, NULL),
(NULL, 2, 3-1), (1, NULL, 3-1), (1, 2-1, NULL);
SELECT (1,2,3) = (1,   NULL, 3);
(1,2,3) = (1,   NULL, 3)
NULL
SELECT (1,2,3) = (1+1, NULL, 3);
(1,2,3) = (1+1, NULL, 3)
0
SELECT (1,2,3) = (1,   NULL, 3+1);
(1,2,3) = (1,   NULL, 3+1)
0
SELECT * FROM t1 WHERE (a,b,c) = (1,2,3);
a	b	c
1	2	3
SELECT (1,2,3) <> (1,   NULL, 3);
(1,2,3) <> (1,   NULL, 3)
NULL
SELECT (1,2,3) <> (1+1, NULL, 3);
(1,2,3) <> (1+1, NULL, 3)
1
SELECT (1,2,3) <> (1,   NULL, 3+1);
(1,2,3) <> (1,   NULL, 3+1)
1
SELECT * FROM t1 WHERE (a,b,c) <> (1,2,3);
a	b	c
NULL	2	4
1	NULL	4
1	3	NULL
NULL	2	2
1	NULL	2
1	1	NULL
SELECT (1,2,3) < (NULL, 2,    3);
(1,2,3) < (NULL, 2,    3)
NULL
SELECT (1,2,3) < (1,    NULL, 3);
(1,2,3) < (1,    NULL, 3)
NULL
SELECT (1,2,3) < (1-1,  NULL, 3);
(1,2,3) < (1-1,  NULL, 3)
0
SELECT (1,2,3) < (1+1,  NULL, 3);
(1,2,3) < (1+1,  NULL, 3)
1
SELECT * FROM t1 WHERE (a,b,c) < (1,2,3);
a	b	c
1	1	NULL
SELECT (1,2,3) <= (NULL, 2,    3);
(1,2,3) <= (NULL, 2,    3)
NULL
SELECT (1,2,3) <= (1,    NULL, 3);
(1,2,3) <= (1,    NULL, 3)
NULL
SELECT (1,2,3) <= (1-1,  NULL, 3);
(1,2,3) <= (1-1,  NULL, 3)
0
SELECT (1,2,3) <= (1+1,  NULL, 3);
(1,2,3) <= (1+1,  NULL, 3)
1
SELECT * FROM t1 WHERE (a,b,c) <= (1,2,3);
a	b	c
1	2	3
1	1	NULL
SELECT (1,2,3) > (NULL, 2,    3);
(1,2,3) > (NULL, 2,    3)
NULL
SELECT (1,2,3) > (1,    NULL, 3);
(1,2,3) > (1,    NULL, 3)
NULL
SELECT (1,2,3) > (1-1,  NULL, 3);
(1,2,3) > (1-1,  NULL, 3)
1
SELECT (1,2,3) > (1+1,  NULL, 3);
(1,2,3) > (1+1,  NULL, 3)
0
SELECT * FROM t1 WHERE (a,b,c) > (1,2,3);
a	b	c
1	3	NULL
SELECT (1,2,3) >= (NULL, 2,    3);
(1,2,3) >= (NULL, 2,    3)
NULL
SELECT (1,2,3) >= (1,    NULL, 3);
(1,2,3) >= (1,    NULL, 3)
NULL
SELECT (1,2,3) >= (1-1,  NULL, 3);
(1,2,3) >= (1-1,  NULL, 3)
1
SELECT (1,2,3) >= (1+1,  NULL, 3);
(1,2,3) >= (1+1,  NULL, 3)
0
SELECT * FROM t1 WHERE (a,b,c) >= (1,2,3);
a	b	c
1	2	3
1	3	NULL
DROP TABLE t1;
SELECT ROW(1,1,1) = ROW(1,1,1) as `1`, ROW(1,1,1) = ROW(1,2,1) as `0`, ROW(1,NULL,1) = ROW(2,2,1) as `0`, ROW(1,NULL,1) = ROW(1,2,2) as `0`, ROW(1,NULL,1) = ROW(1,2,1) as `null` ;
1	0	0	0	null
1	0	0	0	NULL
select row(NULL,1)=(2,0);
row(NULL,1)=(2,0)
0
CREATE TABLE t1 (a int, b int, PRIMARY KEY (a,b));
INSERT INTO t1 VALUES (1,1), (2,1), (3,1), (1,2), (3,2), (3,3);
ANALYZE TABLE t1;
EXPLAIN SELECT * FROM t1 WHERE a=3 AND b=2;
id	estRows	task	access object	operator info
Point_Get_1	1.00	root	table:t1, index:PRIMARY(a, b)	
EXPLAIN SELECT * FROM t1 WHERE (a,b)=(3,2);
id	estRows	task	access object	operator info
Point_Get_5	1.00	root	table:t1, index:PRIMARY(a, b)	
SELECT * FROM t1 WHERE a=3 and b=2;
a	b
3	2
SELECT * FROM t1 WHERE (a,b)=(3,2);
a	b
3	2
CREATE TABLE t2 (a int, b int, c int, PRIMARY KEY (a,b,c));
INSERT INTO t2 VALUES
(1,1,2), (3,1,3), (1,2,2), (4,4,2),
(1,1,1), (3,1,1), (1,2,1);
ANALYZE TABLE t2;
EXPLAIN SELECT * FROM t1,t2 WHERE t1.a=t2.a AND t1.b=t2.b;
id	estRows	task	access object	operator info
MergeJoin_8	7.00	root		inner join, left key:row.t1.a, row.t1.b, right key:row.t2.a, row.t2.b
├─IndexReader_32(Build)	7.00	root		index:IndexFullScan_31
│ └─IndexFullScan_31	7.00	cop[tikv]	table:t2, index:PRIMARY(a, b, c)	keep order:true
└─IndexReader_30(Probe)	6.00	root		index:IndexFullScan_29
  └─IndexFullScan_29	6.00	cop[tikv]	table:t1, index:PRIMARY(a, b)	keep order:true
EXPLAIN SELECT * FROM t1,t2 WHERE (t1.a,t1.b)=(t2.a,t2.b);
id	estRows	task	access object	operator info
MergeJoin_8	7.00	root		inner join, left key:row.t1.a, row.t1.b, right key:row.t2.a, row.t2.b
├─IndexReader_32(Build)	7.00	root		index:IndexFullScan_31
│ └─IndexFullScan_31	7.00	cop[tikv]	table:t2, index:PRIMARY(a, b, c)	keep order:true
└─IndexReader_30(Probe)	6.00	root		index:IndexFullScan_29
  └─IndexFullScan_29	6.00	cop[tikv]	table:t1, index:PRIMARY(a, b)	keep order:true
SELECT * FROM t1,t2 WHERE t1.a=t2.a and t1.b=t2.b;
a	b	a	b	c
1	1	1	1	1
1	1	1	1	2
1	2	1	2	1
1	2	1	2	2
3	1	3	1	1
3	1	3	1	3
SELECT * FROM t1,t2 WHERE (t1.a,t1.b)=(t2.a,t2.b);
a	b	a	b	c
1	1	1	1	1
1	1	1	1	2
1	2	1	2	1
1	2	1	2	2
3	1	3	1	1
3	1	3	1	3
SELECT * FROM t1,t2 WHERE t1.a=1 and t1.b=t2.b;
a	b	a	b	c
1	1	1	1	1
1	1	1	1	2
1	1	3	1	1
1	1	3	1	3
1	2	1	2	1
1	2	1	2	2
SELECT * FROM t1,t2 WHERE (t1.a,t1.b)=(t2.a,2);
a	b	a	b	c
1	2	1	1	1
1	2	1	1	2
1	2	1	2	1
1	2	1	2	2
3	2	3	1	1
3	2	3	1	3
SELECT * FROM t1,t2 WHERE (t1.a,t1.b)=(t2.a,t2.b+1);
a	b	a	b	c
1	2	1	1	1
1	2	1	1	2
3	2	3	1	1
3	2	3	1	3
SELECT * FROM t1,t2 WHERE (t1.a-1,t1.b)=(t2.a-1,t2.b+1);
a	b	a	b	c
1	2	1	1	1
1	2	1	1	2
3	2	3	1	1
3	2	3	1	3
EXPLAIN SELECT * FROM t2 WHERE a=3 AND b=2;
id	estRows	task	access object	operator info
IndexReader_6	1.07	root		index:IndexRangeScan_5
└─IndexRangeScan_5	1.07	cop[tikv]	table:t2, index:PRIMARY(a, b, c)	range:[3 2,3 2], keep order:false
EXPLAIN SELECT * FROM t2 WHERE (a,b)=(3,2);
id	estRows	task	access object	operator info
IndexReader_6	1.07	root		index:IndexRangeScan_5
└─IndexRangeScan_5	1.07	cop[tikv]	table:t2, index:PRIMARY(a, b, c)	range:[3 2,3 2], keep order:false
SELECT * FROM t2 WHERE a=3 and b=2;
a	b	c
SELECT * FROM t2 WHERE (a,b)=(3,2);
a	b	c
SELECT * FROM t1,t2 WHERE (t2.a,(t2.b,t2.c))=(t1.a,(2,1));
a	b	a	b	c
1	1	1	2	1
1	2	1	2	1
SELECT * FROM t1,t2 WHERE t2.a=t1.a AND (t2.b,t2.c)=(2,1);
a	b	a	b	c
1	1	1	2	1
1	2	1	2	1
DROP TABLE t1,t2;
CREATE TABLE t1(
a int, b int, c int, d int, e int, f int, g int, h int,
PRIMARY KEY (a,b,c,d,e,f,g)
);
INSERT INTO t1 VALUES (1,2,3,4,5,6,7,99);
SELECT h FROM t1 WHERE (a,b,c,d,e,f,g)=(1,2,3,4,5,6,7);
h
99
SET @x:= (SELECT h FROM t1 WHERE (a,b,c,d,e,f,g)=(1,2,3,4,5,6,7));
SELECT @x;
@x
99
DROP TABLE t1;
CREATE TABLE t1 (a INT, b INT);
INSERT INTO t1 VALUES (1,1);
SELECT ROW(a, 1) IN (SELECT SUM(b), 1) FROM t1 GROUP BY a;
ROW(a, 1) IN (SELECT SUM(b), 1)
1
SELECT ROW(a, 1) IN (SELECT SUM(b), 3) FROM t1 GROUP BY a;
ROW(a, 1) IN (SELECT SUM(b), 3)
0
DROP TABLE t1;
create table t1 (a varchar(200),
b int unsigned not null primary key auto_increment)
default character set 'utf8';
create table t2 (c varchar(200),
d int unsigned not null primary key auto_increment)
default character set 'latin1';
insert into t1 (a) values('abc');
insert into t2 (c) values('abc');
select * from t1,t2 where (a,b) = (c,d);
a	b	c	d
abc	1	abc	1
select host,user from mysql.user where (host,user) = ('localhost','test');
host	user
drop table t1,t2;
#
# Bug#52124 memory leaks like a sieve in datetime, timestamp, time, date fields + warnings
#
CREATE TABLE t1 (a TIME NOT NULL, b TINYINT);
INSERT IGNORE INTO t1 VALUES (0, 0),(0, 0);
SELECT 1 FROM t1 WHERE ROW(a, b) >=
ROW('1', (SELECT 1 FROM t1 WHERE a > '1234abc'));
1
DROP TABLE t1;
#
# Bug #54190: Comparison to row subquery produces incorrect result
#
SELECT ROW(1,2) = (SELECT 1,2 FROM DUAL WHERE 1 = 0);
ROW(1,2) = (SELECT 1,2 FROM DUAL WHERE 1 = 0)
NULL
SELECT ROW(1,2) = (SELECT 1,3 FROM DUAL WHERE 1 = 0);
ROW(1,2) = (SELECT 1,3 FROM DUAL WHERE 1 = 0)
NULL
CREATE TABLE t1 (i INT);
INSERT INTO t1 () VALUES (1), (2), (3);
SELECT ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0);
ROW(1,2) = (SELECT 1,2 FROM t1 WHERE 1 = 0)
NULL
SELECT ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0);
ROW(1,2) = (SELECT 1,3 FROM t1 WHERE 1 = 0)
NULL
SELECT i FROM t1 WHERE ROW(1,2) = (SELECT 1,2 FROM DUAL WHERE 1 = 0);
i
SELECT i FROM t1 WHERE ROW(1,2) = (SELECT 1,3 FROM DUAL WHERE 1 = 0);
i
DROP TABLE t1;
End of 5.1 tests
#
# Bug#18745214: ASSERTION FAILED: FALSE, FILE SQL_TMP_TABLE.CC OR
#               MALFORMED PACKET
#
CREATE TABLE t1 ( a INT ) ENGINE = INNODB;
INSERT INTO t1 VALUES ( 1 );
ANALYZE TABLE t1;
SELECT row( 1, 1, 1 ) = row( 1, 1 ) FROM t1 GROUP BY a;
Error 1241: Operand should contain 3 column(s)
# Test of manually thrown error.
SELECT 1 <=>ALL (SELECT 1);
Error 1105: We don't support <=> all or <=> any now
DROP TABLE t1;
#
# Bug #22299664 REGRESSION, ASSERTION FAILED: !THD->IS_ERROR() WITH
#               ROW() + SPATIAL FUNCTIONS
#
SELECT ROW(ST_Intersection(POINT(1, 1), 1), (SELECT 1));
Error 1305: FUNCTION row.point does not exist
SELECT ROW(1, ST_Intersection(POINT(1, 1), 1), (SELECT 1));
Error 1305: FUNCTION row.point does not exist
SELECT ROW(POW(1000, 1000), (SELECT 1));
Error 1241: Operand should contain 1 column(s)
SELECT ROW(1, 2, POW(1000, 1000), (SELECT 1));
Error 1241: Operand should contain 1 column(s)
# Bug#31590301: Another MySQL 8.0.20 assert over Linux-5.4.0-39-generic
#               using X86_64
CREATE TABLE v0(v1 DEC, v2 INT);
INSERT INTO v0 VALUES (64, 93);
CREATE ALGORITHM = TEMPTABLE VIEW v3 AS
SELECT *
FROM v0
WHERE (v1, FALSE) IN
((-1, EXISTS (SELECT (-128, 'x', 72) <= (76, 'x', -1))), (-1, 'x'));
DROP VIEW v3;
DROP TABLE v0;
