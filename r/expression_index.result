CREATE TABLE t1 (int_col INTEGER, string_col VARCHAR(255));
INSERT INTO t1 (int_col, string_col) VALUES (-1, "foo"), (1, "bar");
CREATE INDEX int_func_index ON t1 ((ABS(int_col)));
CREATE INDEX string_func_index ON t1 ((SUBSTRING(string_col, 1, 2)));
ANALYZE TABLE t1;
# We should see the functional index syntax in SHOW CREATE TABLE
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `int_col` int(11) DEFAULT NULL,
  `string_col` varchar(255) DEFAULT NULL,
  KEY `int_func_index` ((abs(`int_col`))),
  KEY `string_func_index` ((substring(`string_col`, 1, 2)))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
# INFORMATION_SCHEMA.STATISTICS should show the expression and no column
# name
SELECT * FROM INFORMATION_SCHEMA.STATISTICS
WHERE INDEX_NAME IN ('int_func_index', 'string_func_index') and TABLE_SCHEMA = "expression_index";
TABLE_CATALOG	TABLE_SCHEMA	TABLE_NAME	NON_UNIQUE	INDEX_SCHEMA	INDEX_NAME	SEQ_IN_INDEX	COLUMN_NAME	COLLATION	CARDINALITY	SUB_PART	PACKED	NULLABLE	INDEX_TYPE	COMMENT	INDEX_COMMENT	IS_VISIBLE	Expression
def	expression_index	t1	1	expression_index	int_func_index	1	NULL	A	0	NULL	NULL	YES	BTREE			YES	abs(`int_col`)
def	expression_index	t1	1	expression_index	string_func_index	1	NULL	A	0	NULL	NULL	YES	BTREE			YES	substring(`string_col`, 1, 2)
# INFORMATION_SCHEMA.COLUMNS should not show the hidden generated
# columns.
SELECT COUNT(*) AS should_be_2 FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = "t1" and COLUMNS.TABLE_SCHEMA = "expression_index";
should_be_2
2
# INFORMATION_SCHEMA.COLUMNS should not show the hidden generated
# columns.
SELECT COUNT(*) AS should_be_2 FROM INFORMATION_SCHEMA.COLUMNS c
JOIN INFORMATION_SCHEMA.TABLES t ON (c.TABLE_NAME = t.TABLE_NAME)
WHERE t.TABLE_NAME = "t1" and c.TABLE_SCHEMA = "expression_index" and t.TABLE_SCHEMA = "expression_index";
should_be_2
2
# The optimizer should be able to make use of the functional index.
# Also, the query printed as a warning from EXPLAIN should display the
# expression and not the name of the hidden generated column.
EXPLAIN SELECT * FROM t1 USE INDEX (string_func_index) WHERE SUBSTRING(string_col, 1, 2) = "fo";
id	estRows	task	access object	operator info
Projection_4	1.00	root		expression_index.t1.int_col, expression_index.t1.string_col
└─IndexLookUp_7	1.00	root		
  ├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t1, index:string_func_index(substring(`string_col`, 1, 2))	range:["fo","fo"], keep order:false
  └─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t1	keep order:false
EXPLAIN SELECT * FROM t1 USE INDEX (int_func_index) WHERE ABS(int_col) = 1;
id	estRows	task	access object	operator info
Projection_4	2.00	root		expression_index.t1.int_col, expression_index.t1.string_col
└─IndexLookUp_7	2.00	root		
  ├─IndexRangeScan_5(Build)	2.00	cop[tikv]	table:t1, index:int_func_index(abs(`int_col`))	range:[1,1], keep order:false
  └─TableRowIDScan_6(Probe)	2.00	cop[tikv]	table:t1	keep order:false
# Creating multiple nameless functional indexes should automatically
# generate new names that doesn't collide.
CREATE TABLE t2 (
col1 INT,
INDEX ((col1 * 2)),
INDEX ((col1 * 4)),
INDEX ((col1 * 6)));
SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `col1` int(11) DEFAULT NULL,
  KEY `expression_index` ((`col1` * 2)),
  KEY `expression_index_2` ((`col1` * 4)),
  KEY `expression_index_3` ((`col1` * 6))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
DROP TABLE t2;
# Adding a multi-column index with both a functional part and a
# non-functional part should work just fine.
CREATE INDEX combined_index ON t1 ((int_col + int_col), string_col);
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `int_col` int(11) DEFAULT NULL,
  `string_col` varchar(255) DEFAULT NULL,
  KEY `int_func_index` ((abs(`int_col`))),
  KEY `string_func_index` ((substring(`string_col`, 1, 2))),
  KEY `combined_index` ((`int_col` + `int_col`),`string_col`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
# ...and, the optimizer should be able to use this multi-column index
EXPLAIN SELECT * FROM t1 USE INDEX (combined_index) WHERE int_col + int_col = 2 AND string_col = "bar";
id	estRows	task	access object	operator info
Projection_4	0.80	root		expression_index.t1.int_col, expression_index.t1.string_col
└─IndexLookUp_7	1.00	root		
  ├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t1, index:combined_index(`int_col` + `int_col`, string_col)	range:[2 "bar",2 "bar"], keep order:false
  └─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t1	keep order:false
# Test that if we have a string column with the same name as a function,
# we will pick the function. To pick the column, skip the enclosing
# parentheses around the expression.
ALTER TABLE t1 ADD COLUMN rand VARCHAR(255);
CREATE INDEX name_collision ON t1 ((rand(2)));
Error 3758: Expression of expression index 'name_collision' contains a disallowed function
CREATE INDEX name_collision ON t1 ((`rand`(2)));
Error 3758: Expression of expression index 'name_collision' contains a disallowed function
DROP TABLE t1;
# Check that in case of errors when saving data to the generated column,
# the functional index name is printed and not the auto generated name
# of the generated column.
CREATE TABLE t1 (f1 JSON, f2 VARCHAR(255));
CREATE INDEX my_functional_index ON t1 ((CAST(f1 AS DECIMAL(2, 1))));
CREATE INDEX my_functional_index_2 ON t1 ((CAST(f2 AS CHAR(1))));
CREATE INDEX idx1 ON t1 ((CAST(f2 AS JSON)));
Error 3753: Cannot create an expression index on a function that returns a JSON or GEOMETRY value
INSERT INTO t1 (f2) VALUES ("lorem ipsum");
Error 1406: Data Too Long, field len 1, data len 11
# In non-strict mode, a warning should be printed.
DROP TABLE t1;
SET @@sql_mode=DEFAULT;
CREATE TABLE t1 (t1_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
CREATE INDEX idx1 ON t1 ((t1_id + t1_id));
Error 3754: Expression index 'idx1' cannot refer to an auto-increment column
DROP TABLE t1;
# Check that "SHOW KEYS" prints out the expression for generated columns
# (Column_name should be NULL, and Expression should contain the
# expression).
CREATE TABLE t1 (col1 INT, col2 INT);
CREATE INDEX idx1 ON t1 (col1, (col1 + col2));
SHOW KEYS FROM t1;
Table	Non_unique	Key_name	Seq_in_index	Column_name	Collation	Cardinality	Sub_part	Packed	Null	Index_type	Comment	Index_comment	Visible	Expression	Clustered
t1	1	idx1	1	col1	A	0	NULL	NULL	YES	BTREE			YES	NULL	NO
t1	1	idx1	2	NULL	A	0	NULL	NULL	YES	BTREE			YES	`col1` + `col2`	NO
# Create a funtional index with many functional key parts
ALTER TABLE t1 ADD COLUMN `_V$_idx1_1` INT NOT NULL;
Error 1060: Duplicate column name '_V$_idx1_1'
DROP TABLE t1;
# Creating a functional index on already existing columns using
# ALTER TABLE should work just fine.
CREATE TABLE t1 (col1 INT, col2 INT);
ALTER TABLE t1 ADD INDEX ((ABS(col1)));
ALTER TABLE t1 ADD INDEX ((ABS(col2)));
SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  KEY `expression_index` ((abs(`col1`))),
  KEY `expression_index_2` ((abs(`col2`)))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
# Adding a functional index to a column that is created in the same
# ALTER TABLE statement should work.
ALTER TABLE t1 ADD COLUMN col3 INT;
ALTER TABLE t1 ADD INDEX ((col1 - col3));
DROP TABLE t1;
# Adding a functional index using CREATE TABLE should work
CREATE TABLE t1 (col1 INT, INDEX ((ABS(col1))));
DROP TABLE t1;
# Print out functional indexes on a temporary table. Note that
# "Column_name" should be empty (NULL), and Expression should contain the
# expression for the functional index.
CREATE TABLE t1 (col1 INT, INDEX ((CONCAT(''))));
Error 3761: The used storage engine cannot index the expression 'concat(_utf8mb4'')'
# Check that a functional index cannot be a part of the primary key
CREATE TABLE t1 (col1 INT, PRIMARY KEY ((ABS(col1))));
Error 3756: The primary key cannot be an expression index
CREATE TABLE t1 (col1 INT, PRIMARY KEY (col1, (ABS(col1))));
Error 3756: The primary key cannot be an expression index
CREATE TABLE t1 (col1 INT, col2 INT, PRIMARY KEY (col1, (ABS(col1)), col2));
Error 3756: The primary key cannot be an expression index
CREATE TABLE t1 (col1 INT, col2 INT);
ALTER TABLE t1 ADD PRIMARY KEY ((ABS(col1)));
Error 3756: The primary key cannot be an expression index
ALTER TABLE t1 ADD PRIMARY KEY (col2, (ABS(col1)));
Error 3756: The primary key cannot be an expression index
ALTER TABLE t1 ADD PRIMARY KEY (col1, col2, (ABS(col1)));
Error 3756: The primary key cannot be an expression index
DROP TABLE t1;
# Check that descending functional index works
CREATE TABLE t1 (col1 INT, INDEX ((ABS(col1)) DESC));
EXPLAIN SELECT col1 FROM t1 WHERE ABS(col1) < 1 ORDER BY ABS(col1) DESC;
id	estRows	task	access object	operator info
Projection_6	3323.33	root		expression_index.t1.col1
└─Projection_18	3323.33	root		expression_index.t1.col1, abs(expression_index.t1.col1)
  └─IndexLookUp_17	3323.33	root		
    ├─IndexRangeScan_15(Build)	3323.33	cop[tikv]	table:t1, index:expression_index(abs(`col1`))	range:[-inf,1), keep order:true, desc, stats:pseudo
    └─TableRowIDScan_16(Probe)	3323.33	cop[tikv]	table:t1	keep order:false, stats:pseudo
DROP TABLE t1;
# Test integer index over a JSON key
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->"$.id" AS UNSIGNED))));
INSERT INTO t1 VALUES(CAST('{"id":1}' AS JSON)), (CAST('{"id":2}' AS JSON)),
(CAST('{"id":3}' AS JSON)), (CAST('{"id":4}' AS JSON)),
(CAST('{"id":5}' AS JSON)), (CAST('{"id":6}' AS JSON)),
(CAST('{"id":7}' AS JSON)), (CAST('{"id":8}' AS JSON)),
(CAST('{"id":9}' AS JSON)), (CAST('{"id":10}' AS JSON));
ANALYZE TABLE t1;
SELECT * FROM t1 USE INDEX (idx1) WHERE cast(f1->"$.id" as unsigned)= 5;
f1
{"id": 5}
EXPLAIN SELECT * FROM t1 USE INDEX (idx1) WHERE cast(f1->"$.id" as unsigned)= 5;
id	estRows	task	access object	operator info
Projection_4	1.00	root		expression_index.t1.f1
└─IndexLookUp_7	1.00	root		
  ├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t1, index:idx1(cast(json_extract(`f1`, _utf8mb4'$.id') as unsigned))	range:[5,5], keep order:false
  └─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t1	keep order:false
SELECT * FROM t1 USE INDEX (idx1) WHERE cast(f1->"$.id" as unsigned) IN (1,2,3);
f1
{"id": 1}
{"id": 2}
{"id": 3}
EXPLAIN SELECT * FROM t1 USE INDEX (idx1) WHERE cast(f1->"$.id" as unsigned) IN (1,2,3);
id	estRows	task	access object	operator info
Projection_4	3.00	root		expression_index.t1.f1
└─IndexLookUp_7	3.00	root		
  ├─IndexRangeScan_5(Build)	3.00	cop[tikv]	table:t1, index:idx1(cast(json_extract(`f1`, _utf8mb4'$.id') as unsigned))	range:[1,1], [2,2], [3,3], keep order:false
  └─TableRowIDScan_6(Probe)	3.00	cop[tikv]	table:t1	keep order:false
DROP TABLE t1;
Test string index over a JSON key
set names utf8mb4 collate utf8mb4_bin;
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->>"$.id" AS CHAR(10)))));
INSERT INTO t1 VALUES
(CAST('{"id":"a"}' AS JSON)), (CAST('{"id":"b"}' AS JSON)),
(CAST('{"id":"v"}' AS JSON)), (CAST('{"id":"c"}' AS JSON)),
(CAST('{"id":"x"}' AS JSON)), (CAST('{"id":"\'z"}' AS JSON)),
(JSON_OBJECT("id",JSON_QUOTE("n"))), (CAST('{"id":"w"}' AS JSON)),
(CAST('{"id":"m"}' AS JSON)), (CAST('{"id":"q"}' AS JSON));
ANALYZE TABLE t1;
SELECT * FROM t1 USE INDEX (idx1) WHERE CAST(f1->>"$.id" AS CHAR(10)) = "\"n\"";
f1
{"id": "\"n\""}
EXPLAIN SELECT * FROM t1 USE INDEX (idx1) WHERE CAST(f1->>"$.id" AS CHAR(10)) = "\"n\"";
id	estRows	task	access object	operator info
Projection_4	1.00	root		expression_index.t1.f1
└─IndexLookUp_7	1.00	root		
  ├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t1, index:idx1(cast(json_unquote(json_extract(`f1`, _utf8mb4'$.id')) as char(10)))	range:[""n"",""n""], keep order:false
  └─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t1	keep order:false
SELECT * FROM t1 USE INDEX (idx1) WHERE CAST(f1->>"$.id" AS CHAR(10)) IN ("'z", "\"n\"","a");
f1
{"id": "a"}
{"id": "'z"}
{"id": "\"n\""}
EXPLAIN SELECT * FROM t1 USE INDEX (idx1) WHERE CAST(f1->>"$.id" AS CHAR(10)) IN ("'z", "\"n\"","a");
id	estRows	task	access object	operator info
Projection_4	3.00	root		expression_index.t1.f1
└─IndexLookUp_7	3.00	root		
  ├─IndexRangeScan_5(Build)	3.00	cop[tikv]	table:t1, index:idx1(cast(json_unquote(json_extract(`f1`, _utf8mb4'$.id')) as char(10)))	range:[""n"",""n""], ["'z","'z"], ["a","a"], keep order:false
  └─TableRowIDScan_6(Probe)	3.00	cop[tikv]	table:t1	keep order:false
DROP TABLE t1;
CREATE TABLE t1(f1 JSON, INDEX idx1 ((CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin)));
INSERT INTO t1 VALUES
('{"name": "james"}'),
('{"name": "JAMES"}'),
('{"name": "Peter"}'),
('{"name": "parker"}');
ANALYZE TABLE t1;
# Should not return any rows, and should not use the index
SELECT * FROM t1 WHERE f1->>"$.name" = "James";
f1
EXPLAIN SELECT * FROM t1 WHERE f1->>"$.name" = "James";
id	estRows	task	access object	operator info
TableReader_7	3.20	root		data:Selection_6
└─Selection_6	3.20	cop[tikv]		eq(json_unquote(cast(json_extract(expression_index.t1.f1, "$.name"), var_string(16777216))), "James")
  └─TableFullScan_5	4.00	cop[tikv]	table:t1	keep order:false
# Should return one row, and should not use the index
SELECT * FROM t1 WHERE f1->>"$.name" = "james";
f1
{"name": "james"}
EXPLAIN SELECT * FROM t1 WHERE f1->>"$.name" = "james";
id	estRows	task	access object	operator info
TableReader_7	3.20	root		data:Selection_6
└─Selection_6	3.20	cop[tikv]		eq(json_unquote(cast(json_extract(expression_index.t1.f1, "$.name"), var_string(16777216))), "james")
  └─TableFullScan_5	4.00	cop[tikv]	table:t1	keep order:false
# Should return one row, and should use the index
SELECT * FROM t1 WHERE CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin = "james";
f1
{"name": "james"}
EXPLAIN SELECT * FROM t1 use index(idx1) WHERE CAST(f1->>"$.name" AS CHAR(30)) COLLATE utf8mb4_bin = "james";
id	estRows	task	access object	operator info
Projection_4	1.00	root		expression_index.t1.f1
└─IndexLookUp_7	1.00	root		
  ├─IndexRangeScan_5(Build)	1.00	cop[tikv]	table:t1, index:idx1(cast(json_unquote(json_extract(`f1`, _utf8mb4'$.name')) as char(30)) collate utf8mb4_bin)	range:["james","james"], keep order:false
  └─TableRowIDScan_6(Probe)	1.00	cop[tikv]	table:t1	keep order:false
DROP TABLE t1;
# See that optimizer trace doesn't reveal the name of the hidden
# generated column.
CREATE TABLE t1 (col1 INT, INDEX ((col1 + col1)));
SET optimizer_trace="enabled=on";
SELECT col1 FROM t1 WHERE col1 + col1 = 10;
col1
SELECT TRACE FROM INFORMATION_SCHEMA.OPTIMIZER_TRACE;
TRACE
DROP TABLE t1;
# Test that doing an UPDATE on a hidden generated column returns "column
# not found".
CREATE TABLE t1 (col1 INT, INDEX idx1 ((col1 + col1)));
UPDATE t1 SET _V$_idx1_0 = 123;
Error 1054: Unknown column '_V$_idx1_0' in 'field list'
DROP TABLE t1;
#
# Bug#28037245 VIRTUAL COLUMN IS ALLOWED IN THE WHERE CLAUSE FOR SQL
#              QUERY
#
CREATE TABLE t3 (c1 INT);
CREATE INDEX int_func_index ON t3 ((ABS(c1)));
SELECT * FROM t3 WHERE _V$_int_func_index_0=1;
Error 1054: Unknown column '_V$_int_func_index_0' in 'where clause'
DROP TABLE t3;
#
# Bug#28037375 ALTER TABLE DROP OF A NORMAL COLUMN RAISES ERROR
#
CREATE TABLE t6 (c1 INT, c2 INT);
CREATE INDEX int_func_index ON t6 ((ABS(c1)));
ALTER TABLE t6 DROP COLUMN c2;
DROP TABLE t6;
# Check that a functional index on a function that returns geometry data
# isn't allowed.
CREATE TABLE t1(x VARCHAR(100), KEY ((ST_GeomFromText(x))));
Error 3758: Expression of expression index 'expression_index' contains a disallowed function
# See that we don't print out the names of the hidden generated columns,
# but rather the expression that they represent.
CREATE TABLE t1(x VARCHAR(30), INDEX idx ((CAST(x->>'$.name' AS CHAR(30)))));
INSERT INTO t1 VALUES ('{"name":"knut"}');
ANALYZE TABLE t1;
EXPLAIN format='brief' SELECT * FROM t1 USE INDEX(idx) WHERE CAST(x->>'$.name' AS CHAR(30)) = 'knut';
id	estRows	task	access object	operator info
Projection	1.00	root		expression_index.t1.x
└─IndexLookUp	1.00	root		
  ├─IndexRangeScan(Build)	1.00	cop[tikv]	table:t1, index:idx(cast(json_unquote(json_extract(`x`, _utf8mb4'$.name')) as char(30)))	range:["knut","knut"], keep order:false
  └─TableRowIDScan(Probe)	1.00	cop[tikv]	table:t1	keep order:false
DROP TABLE t1;
# Check that we cannot drop the last visible column when we have hidden
# generated columns.
CREATE TABLE t(x INT, KEY((1+1)));
ALTER TABLE t DROP COLUMN x;
Error 1113: A table must have at least 1 column
DROP TABLE t;
# See that we print out the correct error message in case of duplicate
# index names.
CREATE TABLE t (x INT);
CREATE INDEX idx ON t ((x+1));
CREATE INDEX idx ON t ((x+2));
Error 1061: index already exist idx
DROP TABLE t;
#
# Bug#28206859 SERVER CRASHED WHEN NORMAL INDEX WAS CREATED USING NEW
#              FUNCTIONAL INDEX SYNTAX
#
CREATE TABLE t2(a INT, b INT, INDEX id2 ((a)));
Error 3762: Expression index on a column is not supported. Consider using a regular index instead
#
# Bug#28206912 ASSERTION `TABLE_LIST->TABLE' FAILED.
#
CREATE TABLE t2(a INT, b INT, INDEX id2 ((a+b+c)));
Error 1054: Unknown column 'c' in 'expression'
#
# Bug#28216475 SIG 11 IN ITEM_FIELD::REPLACE_FIELD_PROCESSOR DURING
#              CREATE TABLE
#
CREATE TABLE IF NOT EXISTS table470 ( pk INTEGER AUTO_INCREMENT, a1
VARCHAR(3) NOT NULL, b1 DATETIME NOT NULL, c1 TEXT NOT NULL, d1 TEXT NULL,
PRIMARY KEY (a1), KEY ((VALUES(d1))));
Error 1075: Incorrect table definition; there can be only one auto column and it must be defined as a key
CREATE TABLE  table44 ( pk INTEGER AUTO_INCREMENT, a1 TEXT NOT NULL, b1
DATETIME NOT NULL, c1 TIME NOT NULL, d1 BLOB NOT NULL, PRIMARY KEY (a1), KEY
((VALUES(d1))));
Error 1075: Incorrect table definition; there can be only one auto column and it must be defined as a key
#
# Bug #28222789 SIG 11 IN BITMAP<64U>::INTERSECT DURING CREATE INDEX
#
CREATE TABLE t1 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int_nokey int(11) DEFAULT NULL,
col_int_key int(11) DEFAULT NULL,
col_date_key date DEFAULT NULL,
col_date_nokey date DEFAULT NULL,
col_time_key time DEFAULT NULL,
col_time_nokey time DEFAULT NULL,
col_datetime_key datetime DEFAULT NULL,
col_datetime_nokey datetime DEFAULT NULL,
col_varchar_key varchar(1) DEFAULT NULL,
col_varchar_nokey varchar(1) DEFAULT NULL,
PRIMARY KEY (pk),
KEY col_int_key (col_int_key),
KEY col_date_key (col_date_key),
KEY col_time_key (col_time_key),
KEY col_datetime_key (col_datetime_key),
KEY col_varchar_key (col_varchar_key,col_int_key),
KEY ind25 ((dayofmonth(col_time_nokey))),
KEY ind211 ((cast(col_date_nokey as date)))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4
COLLATE=utf8mb4_0900_ai_ci;
CREATE INDEX ind320 ON t1 ((pk >= col_time_nokey LIKE
ST_GeomFromGeoJSON(col_varchar_key) ));
Error 3758: Expression of expression index 'ind320' contains a disallowed function
DROP TABLE t1;
#
# Bug#28218591 WRONG ERROR MESSAGE WHILE CREATING FUNCTIONAL INDEX
#
# Blank functional index name should give a "Incorrect index name" error
# Check that we don't use the functional index in case of a collation
# mismatch
# Code coverage tests
CREATE TABLE t1 (
col1 FLOAT
, col2 TIMESTAMP
, col3 YEAR
, INDEX ((ABS(col1)))
, INDEX ((ADDDATE(col2, INTERVAL 2 DAY)))
, INDEX ((ABS(col3)))
);
DROP TABLE t1;
CREATE TABLE t1 (
col4 TEXT NOT NULL
, INDEX ((ST_AsBinary(col4)))
);
Error 3758: Expression of expression index 'expression_index' contains a disallowed function
# See that we get a reasonable error message when trying to remove a
# column that is a part of a functional index.
CREATE TABLE t1 (col1 INT, col2 INT, col3 INT, INDEX idx ((col1 + col2 + col3)));
ALTER TABLE t1 DROP COLUMN col2;
Error 3837: Column 'col2' has an expression index dependency and cannot be dropped or renamed
ALTER TABLE t1 DROP COLUMN col3;
Error 3837: Column 'col3' has an expression index dependency and cannot be dropped or renamed
ALTER TABLE t1 DROP INDEX idx;
ALTER TABLE t1 DROP COLUMN col3;
DROP TABLE t1;
# Check that INFORMATION_SCHEMA.KEY_COLUMN_USAGE doesn't reveal any
# functional indexes, since this view provides information about columns
# and a functional index does not represent a column per se.
CREATE TABLE t (
col1 INT
, UNIQUE INDEX regular_index (col1)
, UNIQUE INDEX functional_index ((ABS(col1))));
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE table_name = "t" and TABLE_SCHEMA = "expression_index";
CONSTRAINT_NAME
regular_index
DROP TABLE t;
#
# Bug#28526493 ASSERTION WHEN CREATING A FUNCTIONAL INDEX ON A SUBQUERY
#
CREATE TABLE t1 (x INT);
CREATE TABLE t2 (y INT, KEY (((SELECT * FROM t1))));
Error 3758: Expression of expression index 'expression_index' contains a disallowed function
CREATE TABLE t2 (y INT, KEY (((SELECT x FROM t1))));
Error 3758: Expression of expression index 'expression_index' contains a disallowed function
CREATE TABLE t2 (y INT, KEY (((SELECT 1 FROM t1))));
Error 3758: Expression of expression index 'expression_index' contains a disallowed function
DROP TABLE t1;
#
# Bug#28643252	ASSERT FAILURE WHEN FUNCTIONAL INDEX EXPRESSION IS A LIST
#
#
# Bug#29360763	WL#1075: FUNCTIONAL INDEX: INCORRECT ERROR MESSAGE REVEALS
#              HIDDEN COLUMN NAME
#
CREATE TABLE t1 (
j1 JSON,
j3 JSON,
KEY my_idx ((CAST(j1->'$[0]' as SIGNED))),
KEY my_idx_char ((CAST(j3->'$[0]' as CHAR(10))))
);
ALTER TABLE t1 RENAME KEY my_idx_char TO my_idx;
Error 1061: Duplicate key name 'my_idx'
DROP TABLE t1;
#
# Bug#29317684 REPLICATION IS SENSITIVE TO ORDER OF HIDDEN COLUMNS FOR
#              FUNCTIONAL INDEXES
#
CREATE TABLE t1 (col1 INT, INDEX ((col1 + col1)));
SELECT COLUMN_NAME, ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = "t1" and TABLE_SCHEMA = "expression_index";
COLUMN_NAME	ORDINAL_POSITION
col1	1
ALTER TABLE t1 ADD COLUMN col2 INT;
SELECT COLUMN_NAME, ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = "t1" and TABLE_SCHEMA = "expression_index";
COLUMN_NAME	ORDINAL_POSITION
col1	1
col2	3
DROP TABLE t1;
# See that INSTANT ADD COLUMN still works with this bugfix.
CREATE TABLE t1 (col1 INT, col2 INT AS (col1 + col1), INDEX (col2));
ALTER TABLE t1 ADD COLUMN new_col INT AFTER col1, ALGORITHM=INSTANT;
DROP TABLE t1;
#
# Bug#29934661 FUNCTIONAL INDEX SEEMS TO MALFUNCTION WITH UNSIGNED COLUMN
#
# The hidden column that is added should have a data type that can store
# the absolute value of an unsigned data type.
CREATE TABLE t0(c0 INT UNSIGNED, INDEX idx ((ABS(c0))));
INSERT INTO t0 (c0) VALUES (4294967294);
DROP TABLE t0;
#
# Bug#29723353: ADDING FUNCTIONAL INDEX ON JSON EXPRESSION CHANGES RESULT
#
CREATE TABLE t(j JSON);
INSERT INTO t VALUES ('{"x":"abc"}'), ('{"x":"ABC"}');
SELECT * FROM t WHERE j->>'$.x' = 'abc';
j
{"x": "abc"}
SELECT * FROM t WHERE j->'$.x' = 'abc';
j
{"x": "abc"}
CREATE INDEX idx ON t((CAST(j->>'$.x' AS CHAR(100))));
SELECT * FROM t WHERE j->>'$.x' = 'abc';
j
{"x": "abc"}
SELECT * FROM t WHERE j->'$.x' = 'abc';
j
{"x": "abc"}
ALTER TABLE t DROP INDEX idx;
CREATE INDEX idx ON t((CAST(j->'$.x' AS CHAR(100))));
SELECT * FROM t WHERE j->>'$.x' = 'abc';
j
{"x": "abc"}
SELECT * FROM t WHERE j->'$.x' = 'abc';
j
{"x": "abc"}
DROP TABLE t;
