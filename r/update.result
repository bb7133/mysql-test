drop table if exists t1,t2;
create table t1 (a int auto_increment , primary key (a));
insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL);
update t1 set a=a+10 where a > 34;
update t1 set a=a+100 where a > 0;
update t1 set a=a+100 limit 0;
explain format='brief' update t1 set a=a+100 limit 0;
id	estRows	task	access object	operator info
Update	N/A	root		N/A
└─TableDual	0.00	root		rows:0
update t1 set a=a+100 where a=1 and a=2;
update t1 set a=b+100 where a=1 and a=2;
Error 1054: Unknown column 'b' in 'field list'
update t1 set a=b+100 where c=1 and a=2;
Error 1054: Unknown column 'c' in 'where clause'
update t1 set d=a+100 where a=1;
Error 1054: Unknown column 'd' in 'field list'
select * from t1;
a
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
145
146
drop table t1;
CREATE TABLE t1
(
place_id int (10) unsigned NOT NULL,
shows int(10) unsigned DEFAULT '0' NOT NULL,
ishows int(10) unsigned DEFAULT '0' NOT NULL,
ushows int(10) unsigned DEFAULT '0' NOT NULL,
clicks int(10) unsigned DEFAULT '0' NOT NULL,
iclicks int(10) unsigned DEFAULT '0' NOT NULL,
uclicks int(10) unsigned DEFAULT '0' NOT NULL,
ts timestamp,
PRIMARY KEY (place_id,ts)
);
INSERT INTO t1 (place_id,shows,ishows,ushows,clicks,iclicks,uclicks,ts)
VALUES (1,0,0,0,0,0,0,20000928174434);
UPDATE t1 SET shows=shows+1,ishows=ishows+1,ushows=ushows+1,clicks=clicks+1,iclicks=iclicks+1,uclicks=uclicks+1 WHERE place_id=1 AND ts>="2000-09-28 00:00:00";
select place_id,shows from t1;
place_id	shows
1	1
drop table t1;
create table t1 (a int not null, b int not null, key (a));
insert into t1 values (1,1),(1,2),(1,3),(3,1),(3,2),(3,3),(3,1),(3,2),(3,3),(2,1),(2,2),(2,3);
SET @tmp=0;
update t1 set b=(@tmp:=@tmp+1) order by a;
update t1 set b=99 where a=1 order by b asc limit 1;
select * from t1 order by a,b;
a	b
1	2
1	3
1	99
2	4
2	5
2	6
3	7
3	8
3	9
3	10
3	11
3	12
update t1 set b=100 where a=1 order by b desc limit 2;
update t1 set a=a+10+b where a=1 order by b;
select * from t1 order by a,b;
a	b
2	4
2	5
2	6
3	7
3	8
3	9
3	10
3	11
3	12
13	2
111	100
111	100
create table t2 (a int not null, b int not null);
insert into t2 values (1,1),(1,2),(1,3);
update t1 set b=(select distinct 1 from (select * from t2) a);
drop table t1,t2;
create table t1 (F1 VARCHAR(30), F2 VARCHAR(30), F3 VARCHAR(30), cnt int, groupid int, KEY groupid_index (groupid));
insert into t1 (F1,F2,F3,cnt,groupid) values ('0','0','0',1,6),
('0','1','2',1,5), ('0','2','0',1,3), ('1','0','1',1,2),
('1','2','1',1,1), ('1','2','2',1,1), ('2','0','1',2,4),
('2','2','0',1,7);
delete from m1 using t1 m1,t1 m2 where m1.groupid=m2.groupid and (m1.cnt < m2.cnt or m1.cnt=m2.cnt and m1.F3>m2.F3);
select * from t1;
F1	F2	F3	cnt	groupid
0	0	0	1	6
0	1	2	1	5
0	2	0	1	3
1	0	1	1	2
1	2	1	1	1
2	0	1	2	4
2	2	0	1	7
drop table t1;
CREATE TABLE t1 (
`colA` int(10) unsigned NOT NULL auto_increment,
`colB` int(11) NOT NULL default '0',
PRIMARY KEY  (`colA`)
);
INSERT INTO t1 VALUES (4433,5424);
CREATE TABLE t2 (
`colC` int(10) unsigned NOT NULL default '0',
`colA` int(10) unsigned NOT NULL default '0',
`colD` int(10) unsigned NOT NULL default '0',
`colE` int(10) unsigned NOT NULL default '0',
`colF` int(10) unsigned NOT NULL default '0',
PRIMARY KEY  (`colC`,`colA`,`colD`,`colE`)
);
INSERT INTO t2 VALUES (3,4433,10005,495,500);
INSERT INTO t2 VALUES (3,4433,10005,496,500);
INSERT INTO t2 VALUES (3,4433,10009,494,500);
INSERT INTO t2 VALUES (3,4433,10011,494,500);
INSERT INTO t2 VALUES (3,4433,10005,497,500);
INSERT INTO t2 VALUES (3,4433,10013,489,500);
INSERT INTO t2 VALUES (3,4433,10005,494,500);
INSERT INTO t2 VALUES (3,4433,10005,493,500);
INSERT INTO t2 VALUES (3,4433,10005,492,500);
UPDATE IGNORE t2,t1 set t2.colE = t2.colE + 1,colF=0 WHERE t1.colA = t2.colA AND (t1.colB & 4096) > 0 AND (colE + 1) < colF;
SELECT * FROM t2;
colC	colA	colD	colE	colF
3	4433	10005	495	500
3	4433	10005	496	500
3	4433	10009	495	0
3	4433	10011	495	0
3	4433	10005	498	0
3	4433	10013	490	0
3	4433	10005	494	500
3	4433	10005	493	500
3	4433	10005	492	500
DROP TABLE t1;
DROP TABLE t2;
create table t1 (c1 int, c2 char(6), c3 int);
create table t2 (c1 int, c2 char(6));
insert into t1 values (1, "t1c2-1", 10), (2, "t1c2-2", 20);
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1";
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1" where t1.c3 = 10;
drop table t1, t2;
create table t1 (id int not null auto_increment primary key, id_str varchar(32));
insert into t1 (id_str) values ("test");
update t1 set id_str = concat(id_str, id) where id = last_insert_id();
select * from t1;
id	id_str
1	test1
drop table t1;
create table t1 (a int, b char(255), key(a, b(20)));
insert into t1 values (0, '1');
update t1 set b = b + 1 where a = 0;
select * from t1;
a	b
0	2
drop table t1;
create table t1(f1 int, f2 int);
create table t2(f3 int, f4 int);
create index idx on t2(f3);
insert into t1 values(1,0),(2,0);
insert into t2 values(1,1),(2,2);
UPDATE t1 SET t1.f2=(SELECT MAX(t2.f4) FROM t2 WHERE t2.f3=t1.f1);
select * from t1;
f1	f2
1	1
2	2
drop table t1,t2;
create table t1(f1 int);
select DATABASE();
DATABASE()
update
update t1 set f1=1 where count(*)=1;
Error 1111: Invalid use of group function
select DATABASE();
DATABASE()
update
delete from t1 where count(*)=1;
Error 1111: Invalid use of group function
drop table t1;
create table t1 ( a int, b int default 0, index (a) );
insert into t1 (a) values (0),(0),(0),(0),(0),(0),(0),(0);
select * from t1;
a	b
0	0
0	0
0	0
0	0
0	0
0	0
0	0
0	0
update t1 set a=a+10,b=1 order by a limit 3;
update t1 set a=a+11,b=2 order by a limit 3;
update t1 set a=a+12,b=3 order by a limit 3;
select * from t1 order by a;
a	b
10	1
10	1
11	2
11	2
11	2
12	3
12	3
22	3
drop table t1;
create table t1 (f1 int);
create table t2 (f2 int);
insert into t1 values(1),(2);
insert into t2 values(1),(1);
update t1,t2 set f1=3,f2=3 where f1=f2 and f1=1;
update t2 set f2=1;
update t1 set f1=1 where f1=3;
update t2,t1 set f1=3,f2=3 where f1=f2 and f1=1;
drop table t1,t2;
create table t1 (a int);
insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t2 (a int, filler1 char(200), filler2 char(200), key(a));
insert into t2 select A.a + 10*B.a, 'filler','filler' from t1 A, t1 B;
drop table t1, t2;
create table t1(f1 int, `*f2` int);
insert into t1 values (1,1);
update t1 set `*f2`=1;
drop table t1;
create table t1(f1 int);
update t1 set f2=1 order by f2;
Error 1054: Unknown column 'f2' in 'order clause'
drop table t1;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
CREATE TABLE t1 (
request_id int unsigned NOT NULL auto_increment,
user_id varchar(12) default NULL,
time_stamp datetime NOT NULL default '0000-00-00 00:00:00',
ip_address varchar(15) default NULL,
PRIMARY KEY (request_id),
KEY user_id_2 (user_id,time_stamp)
);
INSERT INTO t1 (user_id) VALUES ('user1');
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
DROP TABLE t1;
SET sql_mode = default;
CREATE TABLE t1 (
a INT(11),
quux decimal( 31, 30 ),
UNIQUE KEY bar (a),
KEY quux (quux)
);
INSERT INTO
t1 ( a, quux )
VALUES
( 1,    1 ),
( 2,  0.1 );
INSERT INTO t1( a )
SELECT @newA := 1 + a FROM t1 WHERE quux <= 0.1;
SELECT * FROM t1;
a	quux
1	1.000000000000000000000000000000
2	0.100000000000000000000000000000
3	NULL
DROP TABLE t1;
set tmp_table_size=1024;
create table t1 (id int, a int, key idx(a));
create table t2 (id int unsigned not null auto_increment primary key, a int);
insert into t2(a) values(1),(2),(3),(4),(5),(6),(7),(8);
insert into t2(a) select a from t2;
insert into t2(a) select a from t2;
insert into t2(a) select a from t2;
update t2 set a=id;
insert into t1 select * from t2;
select count(*) from t1 join t2 on (t1.a=t2.a);
count(*)
64
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
insert into t2(a) select a from t2;
update t2 set a=id;
truncate t1;
insert into t1 select * from t2;
select count(*) from t1 join t2 on (t1.a=t2.a);
count(*)
128
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
update t1 set a=1;
update t2 set a=1;
select count(*) from t1 join t2 on (t1.a=t2.a);
count(*)
16384
update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
drop table t1,t2;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (i INT);
INSERT INTO t1 VALUES (1);
DROP TABLE t1;
End of 5.0 tests
#
# Bug #47919 assert in open_table during ALTER temporary table
#
#
# Bug#50545: Single table UPDATE IGNORE crashes on join view in
# sql_safe_updates mode.
#
CREATE TABLE t1 ( a INT, KEY( a ) );
INSERT INTO t1 VALUES (0), (1);
CREATE VIEW v1 AS SELECT t11.a, t12.a AS b FROM t1 t11, t1 t12;
SET SESSION sql_safe_updates = 1;
SET SESSION sql_safe_updates = DEFAULT;
DROP TABLE t1;
DROP VIEW v1;
#
# Bug#54734 assert in Diagnostics_area::set_ok_status
#
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
DROP TABLE IF EXISTS t1, not_exists;
DROP VIEW IF EXISTS v1;
SET sql_mode = default;
#
# Verify that UPDATE does the same number of handler_update
# operations, no matter if there is ORDER BY or not.
#
CREATE TABLE t1 (i INT) ENGINE=INNODB;
INSERT INTO t1 VALUES (10),(11),(12),(13),(14),(15),(16),(17),(18),(19),
(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),
(30),(31),(32),(33),(34),(35);
CREATE TABLE t2 (a CHAR(2), b CHAR(2), c CHAR(2), d CHAR(2),
INDEX idx (a,b(1),c)) ENGINE=INNODB;
INSERT INTO t2 SELECT i, i, i, i FROM t1;
Same test with a different UPDATE.
ALTER TABLE t2 DROP INDEX idx;
ALTER TABLE t2 ADD INDEX idx2 (a, b);
DROP TABLE t1, t2;
# Bug#20454533: Assertion failed: sargables == 0 || *keyfields ...
CREATE TABLE t1(
a int,
c int,
e int,
f int,
g blob,
h int,
i int,
j blob,
unique key (g(221),c),
unique key (c,a,j(148)),
key (i)
) engine=innodb;
UPDATE (SELECT 1 AS a FROM t1 NATURAL JOIN t1 AS t2) AS x, t1
SET t1.e= x.a;
DROP TABLE t1;
# Bug #21143080: UPDATE ON VARCHAR AND TEXT COLUMNS PRODUCE INCORRECT
#                RESULTS
CREATE TABLE t1 (a VARCHAR(50), b TEXT, c CHAR(50)) ENGINE=INNODB;
INSERT INTO t1 (a, b, c) VALUES ('start trail', '', 'even longer string');
UPDATE t1 SET b = a, a = 'inject';
SELECT a, b FROM t1;
a	b
inject	start trail
UPDATE t1 SET b = c, c = 'inject';
SELECT c, b FROM t1;
c	b
inject	even longer string
DROP TABLE t1;
#
# Bug#18698556: UPDATE ORDER BY DOES A FILESORT IF UPDATING
#               A COLUMN IN THE INDEX
#
CREATE TABLE t1 (
a INTEGER,
b INTEGER,
c INTEGER,
d INTEGER,
KEY key1 (a,b,c)
);
INSERT INTO t1 (a,b,c,d) VALUES (1, 1, 1, 4), (2, 2, 2, 5), (2, 3, 4, 7),
(3, 3, 3, 9), (4, 4, 4, 0), (5, 5, 5, 1), (5, 6, 7, 3), (5, 7, 9, 9);
analyze table t1;
analyze table t1;
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
INSERT INTO t1 (a,b,c,d) VALUES (5, 5, 1, 1), (5, 5, 2, 1), (5, 5, 4, 1);
analyze table t1;
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
analyze table t1;
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
INSERT INTO t1 (a,b,c,d) VALUES (1, 1, 1, 4), (2, 2, 2, 5), (2, 3, 4, 7),
(3, 3, 3, 9), (4, 4, 4, 0), (5, 5, 5, 1), (5, 6, 7, 3), (5, 7, 9, 9);
ANALYZE TABLE t1;
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
INSERT INTO t1 (a,b,c,d) VALUES (1, 1, 1, 4), (2, 2, 2, 5), (2, 3, 4, 7),
(3, 3, 3, 9), (4, 4, 4, 0), (5, 5, 5, 1), (5, 6, 7, 3), (5, 7, 9, 9);
INSERT INTO t1 (a,b,c,d) VALUES (1, 1, 1, 4), (2, 2, 2, 5), (2, 3, 4, 7),
(3, 3, 3, 9), (4, 4, 4, 0), (5, 5, 5, 1), (5, 6, 7, 3), (5, 7, 9, 9);
ANALYZE TABLE t1;
SELECT * FROM t1;
a	b	c	d
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
5	5	1	1
5	5	2	1
5	5	4	1
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
1	1	1	4
2	2	2	5
2	3	4	7
3	3	3	9
4	4	4	0
5	5	5	1
5	6	7	3
5	7	9	9
DROP TABLE t1;
# End of test for Bug#18698556
#
# Bug#21944866: REFACTORING: REMOVE KILL_BAD_DATA
#
CREATE TABLE t1 (a INT PRIMARY KEY, b DATE);
UPDATE t1 SET b= NULL WHERE a < '00:38:47.008761';
DROP TABLE t1;
#
# Bug#21032418: PERFORMANCE REGRESSION IN 5.6: UPDATE DOES NOT USE INDEX
#
CREATE TABLE t1(
id INTEGER NOT NULL AUTO_INCREMENT,
token VARCHAR(255) DEFAULT NULL,
PRIMARY KEY (id),
KEY token (token)
)DEFAULT CHARSET=utf8;
INSERT INTO t1 VALUES (1, "abc"), (2, "def");
SET sql_mode='';
UPDATE t1 SET token = X'ad';
SELECT * FROM t1;
id	token
1	
2	
SET sql_mode=default;
SELECT * FROM t1;
id	token
1	
2	
DROP TABLE t1;
# End of test for Bug#21032418
#
# Bug #29047894: ASSERTION FAILURE: ROW0MYSQL.CC:2387:TRX->ALLOW_SEMI_CONSISTENT()
#
CREATE TABLE t1 (a INTEGER);
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
INSERT INTO t1 VALUES (0);
UPDATE t1 SET a=1 ORDER BY CAST('invalid' AS DATETIME);
SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;
#
# Bug#30158954: INCONSISTENT ROWS MATCHED VALUE FOR UPDATE
#               WITH FAILED CONSTRAINT
#
DROP TABLE t1;
Bug#22671310: Generated columns mess up explain of multi-table update
CREATE TABLE t1(a INTEGER, b INTEGER AS (a));
CREATE TABLE t2(a INTEGER);
EXPLAIN
UPDATE t1 JOIN t2 USING(a) SET t2.a=t2.a+1 WHERE t1.b>0;
id	estRows	task	access object	operator info
Update_6	N/A	root		N/A
└─HashJoin_10	4162.50	root		inner join, equal:[eq(update.t1.a, update.t2.a)]
  ├─Selection_14(Build)	3330.00	root		gt(update.t1.b, 0)
  │ └─TableReader_13	9990.00	root		data:Selection_12
  │   └─Selection_12	9990.00	cop[tikv]		not(isnull(update.t1.a))
  │     └─TableFullScan_11	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
  └─TableReader_17(Probe)	9990.00	root		data:Selection_16
    └─Selection_16	9990.00	cop[tikv]		not(isnull(update.t2.a))
      └─TableFullScan_15	10000.00	cop[tikv]	table:t2	keep order:false, stats:pseudo
DROP TABLE t1, t2;
# Bug#22891840: Error message from update of non-updatable part of
#               join view is inaccurate
CREATE TABLE t1(a1 INTEGER PRIMARY KEY, b1 INTEGER);
CREATE TABLE t2(a2 INTEGER PRIMARY KEY, b2 INTEGER);
DROP TABLE t1, t2;
# Bug#31360425: Segfault in Query_result_update::optimize()
CREATE TABLE g(c INTEGER, b INTEGER);
CREATE TABLE t(a INTEGER);
UPDATE t SET a=1 WHERE EXISTS(SELECT b FROM g WHERE 1 NOT LIKE c FOR UPDATE);
DROP TABLE g, t;
#
# Bug#32112403: UPDATE ON TEXT TYPE COLUMN MAY LEAVE IT EMPTY
#
CREATE TABLE t1(i int primary key, c1 tinytext, c2 text);
INSERT INTO t1 VALUES (-1, 'twofiftyfive', '012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234');
INSERT INTO t1 VALUES(0,'zero',
'0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345');
INSERT INTO t1 VALUES (1, 'one', '01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456');
INSERT INTO t1 VALUES (2, 'two', '012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567');
# Ok because the c2 value can fit in c1
UPDATE t1 SET c1 = c2 WHERE i = -1;
# Fails because these c2 value are too large to fit in c1
UPDATE t1 SET c1 = c2 WHERE i = 0;
Error 1406: Data Too Long, field len 255, data len 256
# Ok with warning when using IGNORE
UPDATE IGNORE t1 SET c1 = c2 WHERE i = 1;
# Ok with warning with empty sql_mode
SET SESSION sql_mode = '';
UPDATE t1 SET c1 = c2 WHERE i = 2;
SET SESSION sql_mode = DEFAULT;
SELECT * FROM t1;
i	c1	c2
-1	012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234	012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234
0	zero	0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345
1	012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234	01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
2	012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234	012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567
DROP TABlE t1;
