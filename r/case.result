drop table if exists t1, t2;
SET sql_mode = 'NO_ENGINE_SUBSTITUTION';
select CASE "b" when "a" then 1 when "b" then 2 END;
CASE "b" when "a" then 1 when "b" then 2 END
2
select CASE "c" when "a" then 1 when "b" then 2 END;
CASE "c" when "a" then 1 when "b" then 2 END
NULL
select CASE "c" when "a" then 1 when "b" then 2 ELSE 3 END;
CASE "c" when "a" then 1 when "b" then 2 ELSE 3 END
3
select CASE BINARY "b" when "a" then 1 when "B" then 2 WHEN "b" then "ok" END;
CASE BINARY "b" when "a" then 1 when "B" then 2 WHEN "b" then "ok" END
ok
select CASE "b" when "a" then 1 when binary "B" then 2 WHEN "b" then "ok" END;
CASE "b" when "a" then 1 when binary "B" then 2 WHEN "b" then "ok" END
ok
select CASE concat("a","b") when concat("ab","") then "a" when "b" then "b" end;
CASE concat("a","b") when concat("ab","") then "a" when "b" then "b" end
a
select CASE when 1=0 then "true" else "false" END;
CASE when 1=0 then "true" else "false" END
false
select CASE 1 when 1 then "one" WHEN 2 then "two" ELSE "more" END;
CASE 1 when 1 then "one" WHEN 2 then "two" ELSE "more" END
one
explain select CASE 1 when 1 then "one" WHEN 2 then "two" ELSE "more" END;
id	estRows	task	access object	operator info
Projection_3	1.00	root		one->Column#1
└─TableDual_4	1.00	root		rows:1
select CASE 2.0 when 1 then "one" WHEN 2.0 then "two" ELSE "more" END;
CASE 2.0 when 1 then "one" WHEN 2.0 then "two" ELSE "more" END
two
select (CASE "two" when "one" then "1" WHEN "two" then "2" END) | 0;
(CASE "two" when "one" then "1" WHEN "two" then "2" END) | 0
2
select (CASE "two" when "one" then 1.00 WHEN "two" then 2.00 END) +0.0;
(CASE "two" when "one" then 1.00 WHEN "two" then 2.00 END) +0.0
2.00
select case 1/0 when "a" then "true" else "false" END;
case 1/0 when "a" then "true" else "false" END
false
select case 1/0 when "a" then "true" END;
case 1/0 when "a" then "true" END
NULL
select (case 1/0 when "a" then "true" END) | 0;
(case 1/0 when "a" then "true" END) | 0
NULL
select (case 1/0 when "a" then "true" END) + 0.0;
(case 1/0 when "a" then "true" END) + 0.0
NULL
select case when 1>0 then "TRUE" else "FALSE" END;
case when 1>0 then "TRUE" else "FALSE" END
TRUE
select case when 1<0 then "TRUE" else "FALSE" END;
case when 1<0 then "TRUE" else "FALSE" END
FALSE
create table t1 (a int);
insert into t1 values(1),(2),(3),(4);
select case a when 1 then 2 when 2 then 3 else 0 end as fcase, count(*) from t1 group by fcase;
fcase	count(*)
0	2
2	1
3	1
analyze table t1;
explain select case a when 1 then 2 when 2 then 3 else 0 end as fcase, count(*) from t1 group by fcase;
id	estRows	task	access object	operator info
Projection_4	4.00	root		case(eq(case.t1.a, 1), 2, eq(case.t1.a, 2), 3, 0)->Column#4, Column#3
└─HashAgg_7	4.00	root		group by:Column#10, funcs:count(1)->Column#3, funcs:firstrow(Column#9)->case.t1.a
  └─Projection_13	4.00	root		case.t1.a, case(eq(case.t1.a, 1), 2, eq(case.t1.a, 2), 3, 0)->Column#10
    └─TableReader_12	4.00	root		data:TableFullScan_11
      └─TableFullScan_11	4.00	cop[tikv]	table:t1	keep order:false
select case a when 1 then "one" when 2 then "two" else "nothing" end as fcase, count(*) from t1 group by fcase;
fcase	count(*)
nothing	2
one	1
two	1
drop table t1;
create table t1 (`row` int not null, col int not null, val varchar(255) not null);
insert into t1 values (1,1,'orange'),(1,2,'large'),(2,1,'yellow'),(2,2,'medium'),(3,1,'green'),(3,2,'small');
select max(case col when 1 then val else null end) as color from t1 group by `row`;
color
green
orange
yellow
drop table t1;
SET NAMES latin1;
SELECT CASE
WHEN 1
THEN _latin1'a' COLLATE latin1_danish_ci
ELSE _latin1'a' COLLATE latin1_swedish_ci
END;
Error 1267: Illegal mix of collations (latin1_danish_ci,EXPLICIT) and (latin1_swedish_ci,EXPLICIT) for operation 'case'
SELECT CASE _latin1'a' COLLATE latin1_general_ci
WHEN _latin1'a' COLLATE latin1_danish_ci  THEN 1
WHEN _latin1'a' COLLATE latin1_swedish_ci THEN 2
END;
Error 1267: Illegal mix of collations (latin1_general_ci,EXPLICIT) and (latin1_danish_ci,EXPLICIT) for operation '='
SELECT
CASE _latin1'a' COLLATE latin1_general_ci  WHEN _latin1'A' THEN '1' ELSE 2 END,
CASE _latin1'a' COLLATE latin1_bin         WHEN _latin1'A' THEN '1' ELSE 2 END,
CASE _latin1'a' WHEN _latin1'A' COLLATE latin1_swedish_ci THEN '1' ELSE 2 END,
CASE _latin1'a' WHEN _latin1'A' COLLATE latin1_bin        THEN '1' ELSE 2 END
;
CASE _latin1'a' COLLATE latin1_general_ci  WHEN _latin1'A' THEN '1' ELSE 2 END	CASE _latin1'a' COLLATE latin1_bin         WHEN _latin1'A' THEN '1' ELSE 2 END	CASE _latin1'a' WHEN _latin1'A' COLLATE latin1_swedish_ci THEN '1' ELSE 2 END	CASE _latin1'a' WHEN _latin1'A' COLLATE latin1_bin        THEN '1' ELSE 2 END

2	2	2	2
SELECT 'case+union+test'
UNION
SELECT CASE LOWER('1') WHEN LOWER('2') THEN 'BUG' ELSE 'nobug' END;
case+union+test
case+union+test
nobug
SELECT CASE LOWER('1') WHEN LOWER('2') THEN 'BUG' ELSE 'nobug' END;
CASE LOWER('1') WHEN LOWER('2') THEN 'BUG' ELSE 'nobug' END
nobug
SELECT 'case+union+test'
UNION
SELECT CASE '1' WHEN '2' THEN 'BUG' ELSE 'nobug' END;
case+union+test
case+union+test
nobug
create table t1(a float, b int default 3);
insert into t1 (a) values (2), (11), (8);
select min(a), min(case when 1=1 then a else NULL end),
min(case when 1!=1 then NULL else a end)
from t1 where b=3 group by b;
min(a)	min(case when 1=1 then a else NULL end)	min(case when 1!=1 then NULL else a end)
2	2	2
drop table t1;
CREATE TABLE t1 (EMPNUM INT);
INSERT INTO t1 VALUES (0), (2);
CREATE TABLE t2 (EMPNUM DECIMAL (4, 2));
INSERT INTO t2 VALUES (0.0), (9.0);
SELECT COALESCE(t2.EMPNUM,t1.EMPNUM) AS CEMPNUM,
t1.EMPNUM AS EMPMUM1, t2.EMPNUM AS EMPNUM2
FROM t1 LEFT JOIN t2 ON t1.EMPNUM=t2.EMPNUM;
CEMPNUM	EMPMUM1	EMPNUM2
0.00	0	0.00
2	2	NULL
SELECT IFNULL(t2.EMPNUM,t1.EMPNUM) AS CEMPNUM,
t1.EMPNUM AS EMPMUM1, t2.EMPNUM AS EMPNUM2
FROM t1 LEFT JOIN t2 ON t1.EMPNUM=t2.EMPNUM;
CEMPNUM	EMPMUM1	EMPNUM2
0.00	0	0.00
2	2	NULL
DROP TABLE t1,t2;
End of 4.1 tests
create table t1 (a int, b bigint unsigned);
create table t2 (c int);
insert into t1 (a, b) values (1,4572794622775114594), (2,18196094287899841997),
(3,11120436154190595086);
insert into t2 (c) values (1), (2), (3);
select t1.a, (case t1.a when 0 then 0 else t1.b end) d from t1
join t2 on t1.a=t2.c order by d;
a	d
1	4572794622775114594
3	11120436154190595086
2	18196094287899841997
select t1.a, (case t1.a when 0 then 0 else t1.b end) d from t1
join t2 on t1.a=t2.c where b=11120436154190595086 order by d;
a	d
3	11120436154190595086
drop table t1, t2;
End of 5.0 tests
CREATE TABLE t1(a YEAR);
SELECT 1 FROM t1 WHERE a=1 AND CASE 1 WHEN a THEN 1 ELSE 1 END;
1
DROP TABLE t1;
SET sql_mode = default;
# Bug#24733658: IF and friends give wrong type for signed and unsigned
CREATE TABLE source(bt INTEGER, bf INTEGER, i8u BIGINT UNSIGNED, i8s BIGINT);
INSERT INTO source VALUES
(1,0,0,-9223372036854775808), (1,0,18446744073709551615,9223372036854775807);
CREATE TABLE `target` ( `u` decimal(20,0) DEFAULT NULL, `s` decimal(20,0) DEFAULT NULL);
INSERT INTO target SELECT IF(bt,i8u,i8s) AS u, IF(bf,i8u,i8s) AS s FROM source;
DROP TABLE source, `target`;
# Bug#25139420: BIT(n) data type confused when used with IF, IFNULL
CREATE TABLE t (a bit(5));
INSERT INTO t VALUES
(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),
(10),(11),(12),(19),(20),(21),(29),(30),(31);
DROP TABLE t
# Bug#26389402: Outer join optimized away with user-defined functions
CREATE TABLE t00(a INTEGER);
INSERT INTO t00 VALUES (1),(2);
CREATE TABLE t01(a INTEGER);
INSERT INTO t01 VALUES (1);
CREATE VIEW v0 AS
SELECT t00.a, t01.a AS b, IFNULL(t01.a, 666) AS c
FROM t00 LEFT JOIN t01 USING(a);
SELECT * FROM v0
WHERE c >= 0;
a	b	c
1	1	1
2	NULL	666
DROP VIEW v0;
DROP TABLE t00, t01;
#
# Bug #25051195 Wrong calculation of decimals after point for IFNULL w/ GROUP BY using
#               temporary table.
CREATE TABLE t (i1 INT,
d1 DOUBLE,
e2 DECIMAL(5,2));
INSERT INTO t VALUES ( 6,    6.0,  10.0/3),
( null, 9.0,  10.0/3),
( 1,    null, 10.0/3),
( 2,    2.0,  null  );
IFNULL and IF should yield same number for decimals after point here
SELECT IFNULL(e2,i1) nullif_c,
IF(e2 IS NULL,i1,e2) if_c,
SUM(d1) FROM t
GROUP BY e2,i1 ORDER BY nullif_c, SUM(d1);
nullif_c	if_c	SUM(d1)
2	2	2
3.33	3.33	NULL
3.33	3.33	6
3.33	3.33	9
DROP TABLE t;
# Bug#29463760 In cases like ifnull(datetime(2), time(3), wrong answer
#
# Test for a memory leak in WL#6570
#
CREATE TABLE t1 (a VARCHAR(110));
INSERT INTO t1 VALUES (REPEAT("a",100));
SELECT (t1.a,t1.a) IN (('a','c'),('a','b')) END FROM t1;
END
0
SELECT CASE t1.a WHEN 'a' THEN 'c' ELSE 'd' END FROM t1;
CASE t1.a WHEN 'a' THEN 'c' ELSE 'd' END
d
DROP TABLE t1;
#
# Bug#32591239: VAL_JSON(JSON_WRAPPER*):ASSERTION
#               `!CURRENT_THD->IS_ERROR() && HAS_VALUE' FAILED
#
CREATE TABLE t1 (col_int int, col_double double, j json);
INSERT INTO t1 VALUES (382218415, -36452.389, '{"key1": 220655528}');
SELECT col_int FROM t1
WHERE CASE WHEN POWER(col_double, col_int) THEN j ELSE j END;
Error 1690: DOUBLE value is out of range in 'pow(-36452.389, 382218415)'
DROP TABLE t1;
# Bug#32865008: GROUP_CONCAT: setup_fields: assertion `!thd->is_error()' failed
DO GROUP_CONCAT(DISTINCT NULLIF(1, PERIOD_ADD(0x6f09c5f8 ,'7451-01-27')));
Error 1111: Invalid use of group function
