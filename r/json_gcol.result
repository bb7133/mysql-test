CREATE TABLE t(
j JSON,
stored_gc JSON GENERATED ALWAYS AS (JSON_EXTRACT(j, '$[0]')) STORED,
virtual_gc JSON GENERATED ALWAYS AS (JSON_EXTRACT(j, '$[1]')) VIRTUAL);
INSERT INTO t(j) VALUES
(JSON_ARRAY(1, 2)), (JSON_ARRAY(2, 1)), (JSON_ARRAY(10, 10)), (JSON_ARRAY(5));
SELECT * FROM t ORDER BY stored_gc;
j	stored_gc	virtual_gc
[1, 2]	1	2
[2, 1]	2	1
[5]	5	NULL
[10, 10]	10	10
SELECT * FROM t ORDER BY virtual_gc;
j	stored_gc	virtual_gc
[5]	5	NULL
[2, 1]	2	1
[1, 2]	1	2
[10, 10]	10	10
DROP TABLE t;
# ----------------------------------------------------------------------
# Test of generated columns that call JSON functions
# ----------------------------------------------------------------------
CREATE TABLE t(id INT, j JSON,
gc INT GENERATED ALWAYS AS (JSON_EXTRACT(j, '$[0]')));
INSERT INTO t(id, j) VALUES (0, '"5"'), (1, '[]'), (2, '[1,2]'), (3, '5');
INSERT INTO t(j) VALUES ('{}');
Error 1292: Truncated incorrect INTEGER value: '{}'
INSERT INTO t(j) VALUES ('{"a":1}');
Error 1292: Truncated incorrect INTEGER value: '{"a": 1}'
INSERT INTO t(j) VALUES ('"abc"');
Error 1292: Truncated incorrect DOUBLE value: 'abc'
INSERT INTO t(j) VALUES ('');
Error 3140: Invalid JSON text: The document is empty
INSERT INTO t(j) VALUES ('[');
Error 3140: Invalid JSON text: The document root must not be followed by other values.
SELECT * FROM t ORDER BY id;
id	j	gc
0	"5"	5
1	[]	NULL
2	[1, 2]	1
3	5	5
UPDATE t SET j = '[123]';
SELECT * FROM t ORDER BY id;
id	j	gc
0	[123]	123
1	[123]	123
2	[123]	123
3	[123]	123
UPDATE t SET j = '[';
Error 3140: Invalid JSON text: The document root must not be followed by other values.
DROP TABLE t;
CREATE TABLE t(id INT, j JSON,
gc JSON GENERATED ALWAYS AS (JSON_ARRAY(j)));
INSERT INTO t(id, j)
VALUES (1, '1'), (2, '[true, false]'), (3, '{"a":1,"b":2}');
INSERT INTO t(j) VALUES ('');
Error 3140: Invalid JSON text: The document is empty
INSERT INTO t(j) VALUES ('[');
Error 3140: Invalid JSON text: The document root must not be followed by other values.
SELECT * FROM t ORDER BY id;
id	j	gc
1	1	[1]
2	[true, false]	[[true, false]]
3	{"a": 1, "b": 2}	[{"a": 1, "b": 2}]
UPDATE t SET j = '"abc"';
SELECT * FROM t ORDER BY id;
id	j	gc
1	"abc"	["abc"]
2	"abc"	["abc"]
3	"abc"	["abc"]
UPDATE t SET j = '[';
Error 3140: Invalid JSON text: The document root must not be followed by other values.
DROP TABLE t;
CREATE TABLE t(ts TIMESTAMP, j JSON AS (CAST(ts AS JSON)));
INSERT INTO t(ts) VALUES ('2000-01-01 00:00:00');
SELECT CAST(JSON_ARRAY(ts, j) AS CHAR) FROM t;
CAST(JSON_ARRAY(ts, j) AS CHAR)
["2000-01-01 00:00:00.000000", "2000-01-01 00:00:00.000000"]
DROP TABLE t;
#
# Bug#21491442 VARIANT::FORCED_RETURN() [WITH T = JSON_SCALAR*]:
#              ASSERTION `FALSE' FAILED.
#
#
# WL#8170: Expression analyzer for GC.
# Queries with GC and JSON_EXTRACT  compared to strings should use index
#
create table t1(
f1 json,
gc varchar(20) character set utf8mb4 as
(json_unquote(json_extract(f1,"$"))) stored,
key gc_idx(gc));
insert into t1(f1) values ('"qwe"'),('"rty"'),('"uiop"');
insert into t1(f1) values ('"zxc"'),('"vbn"'),('"mnb"');
insert into t1(f1) select f1 from t1;
insert into t1(f1) select f1 from t1;
insert into t1(f1) values ('"asd"'),('"asdf"'),('"asasas"');
select f1 from t1 where gc = "asd";
f1
"asd"
explain select f1 from t1 where gc = "asd";
id	estRows	task	access object	operator info
Projection_4	10.00	root		json_gcol.t1.f1
└─IndexLookUp_10	10.00	root		
  ├─IndexRangeScan_8(Build)	10.00	cop[tikv]	table:t1, index:gc_idx(gc)	range:["asd","asd"], keep order:false, stats:pseudo
  └─TableRowIDScan_9(Probe)	10.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where json_extract(f1,"$") = "asd";
f1
"asd"
explain select f1 from t1 where json_extract(f1,"$") = "asd";
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		eq(json_extract(json_gcol.t1.f1, "$"), cast("asd", json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where "asd" = json_extract(f1,"$");
f1
"asd"
explain select f1 from t1 where "asd" = json_extract(f1,"$");
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		eq(cast("asd", json BINARY), json_extract(json_gcol.t1.f1, "$"))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where gc > "z";
f1
"zxc"
"zxc"
"zxc"
"zxc"
explain select f1 from t1 where gc > "z";
id	estRows	task	access object	operator info
Projection_4	3333.33	root		json_gcol.t1.f1
└─TableReader_7	3333.33	root		data:Selection_6
  └─Selection_6	3333.33	cop[tikv]		gt(json_gcol.t1.gc, "z")
    └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where json_extract(f1,"$") > "z";
f1
"zxc"
"zxc"
"zxc"
"zxc"
explain select f1 from t1 where json_extract(f1,"$") > "z";
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		gt(json_extract(json_gcol.t1.f1, "$"), cast("z", json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where gc > "v" and gc < "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where gc > "v" and gc < "z";
id	estRows	task	access object	operator info
Projection_4	250.00	root		json_gcol.t1.f1
└─IndexLookUp_10	250.00	root		
  ├─IndexRangeScan_8(Build)	250.00	cop[tikv]	table:t1, index:gc_idx(gc)	range:("v","z"), keep order:false, stats:pseudo
  └─TableRowIDScan_9(Probe)	250.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where json_extract(f1,"$") > "v" and json_extract(f1,"$") < "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where json_extract(f1,"$") > "v" and json_extract(f1,"$") < "z";
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		gt(json_extract(json_gcol.t1.f1, "$"), cast("v", json BINARY)), lt(json_extract(json_gcol.t1.f1, "$"), cast("z", json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where gc between "v" and "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where gc between "v" and "z";
id	estRows	task	access object	operator info
Projection_4	250.00	root		json_gcol.t1.f1
└─IndexLookUp_10	250.00	root		
  ├─IndexRangeScan_8(Build)	250.00	cop[tikv]	table:t1, index:gc_idx(gc)	range:["v","z"], keep order:false, stats:pseudo
  └─TableRowIDScan_9(Probe)	250.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where json_extract(f1,"$") between "v" and "z";
f1
"vbn"
"vbn"
"vbn"
"vbn"
explain select f1 from t1 where json_extract(f1,"$") between "v" and "z";
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		ge(json_extract(json_gcol.t1.f1, "$"), cast("v", json BINARY)), le(json_extract(json_gcol.t1.f1, "$"), cast("z", json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where gc in ("asd","asasas","asdf");
f1
"asd"
"asdf"
"asasas"
explain select f1 from t1 where gc in ("asd","asasas","asdf");
id	estRows	task	access object	operator info
Projection_4	30.00	root		json_gcol.t1.f1
└─IndexLookUp_10	30.00	root		
  ├─IndexRangeScan_8(Build)	30.00	cop[tikv]	table:t1, index:gc_idx(gc)	range:["asasas","asasas"], ["asd","asd"], ["asdf","asdf"], keep order:false, stats:pseudo
  └─TableRowIDScan_9(Probe)	30.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
explain select f1 from t1 where json_extract(f1,"$") in ("asd","asasas","asdf");
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		in(json_extract(json_gcol.t1.f1, "$"), cast("asd", json BINARY), cast("asasas", json BINARY), cast("asdf", json BINARY))
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
select f1 from t1 where json_unquote(json_extract(f1,"$"))="asd";
f1
"asd"
explain select f1 from t1 where json_unquote(json_extract(f1,"$"))="asd";
id	estRows	task	access object	operator info
TableReader_7	8000.00	root		data:Selection_6
└─Selection_6	8000.00	cop[tikv]		eq(json_unquote(cast(json_extract(json_gcol.t1.f1, "$"), var_string(16777216))), "asd")
  └─TableFullScan_5	10000.00	cop[tikv]	table:t1	keep order:false, stats:pseudo
drop table t1;
create table t1(f1 varchar(10), gc varchar(10) as (json_unquote(f1)) stored,
key gc_idx(gc));
insert into t1(f1) values ('"qwe"'),('"rty"'),('"uiop"');
select f1 from t1 where lower(f1)="qwe";
f1
drop table t1;
#
#
# Bug#21054516:QUERY HAVING SQL_BIG_RESULT ON JSON DATA GIVES EXTRA
#              ROWS IN OUTPUT
#
#
# Bug#26352119: WHERE JSON_EXTRACT() ON GEN KEY
#
SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE TABLE t1 (j JSON, pk VARCHAR(10) AS (j->>'$.id') STORED PRIMARY KEY);
INSERT INTO t1 (j) VALUES ('{"id":"a"}'), ('{"id":"b"}'), ('{"id":"c"}');
ANALYZE TABLE t1;
explain SELECT * FROM t1 WHERE j->>'$.id'='b';
id	estRows	task	access object	operator info
TableReader_7	2.40	root		data:Selection_6
└─Selection_6	2.40	cop[tikv]		eq(json_unquote(cast(json_extract(json_gcol.t1.j, "$.id"), var_string(16777216))), "b")
  └─TableFullScan_5	3.00	cop[tikv]	table:t1	keep order:false
SELECT * FROM t1 WHERE j->>'$.id'='b';
j	pk
{"id": "b"}	b
DROP TABLE t1;
