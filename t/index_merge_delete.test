#
# Index_merge tests with DELETE statements
#
--disable_warnings
set @@tidb_enable_index_merge = on;
DROP TABLE IF EXISTS t1;

CREATE TABLE t1
(
  key1 INT NOT NULL,
  key2 INT NOT NULL,
  key3 INT NOT NULL,
  key4 INT NOT NULL,
  key5 INT,
  key6 INT,
  key7 INT NOT NULL,
  key8 INT NOT NULL,
  INDEX i1(key1),
  INDEX i2(key2),
  INDEX i3(key3),
  INDEX i4(key4),
  INDEX i5(key5),
  INDEX i6(key6)
);

--disable_query_log

# inserting values 

INSERT INTO t1 VALUES ( 1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2);

INSERT INTO t1 SELECT key1+2, key2+2, key3+2, key4+2,key5+2, key6+2, key7+2, key8+2 FROM t1;
INSERT INTO t1 SELECT key1+4, key2+4, key3+4, key4+4,key5+4, key6+4, key7+4, key8+4 FROM t1;
INSERT INTO t1 SELECT key1+8, key2+8, key3+8, key4+8,key5+8, key6+8, key7+8, key8+8 FROM t1;
INSERT INTO t1 SELECT key1+16, key2+16, key3+16, key4+16,key5+16, key6+16, key7+16, key8+16 FROM t1;
INSERT INTO t1 SELECT key1+32, key2+32, key3+32, key4+32,key5+32, key6+32, key7+32, key8+32 FROM t1;
INSERT INTO t1 SELECT key1+64, key2+64, key3+64, key4+64,key5+64, key6+64, key7+64, key8+64 FROM t1;
INSERT INTO t1 SELECT key1+128, key2+128, key3+128, key4+128,key5+128, key6+128, key7+128, key8+128 FROM t1;
INSERT INTO t1 SELECT key1+256, key2+256, key3+256, key4+256,key5+256, key6+256, key7+256, key8+256 FROM t1;
INSERT INTO t1 SELECT key1+512, key2+512, key3+512, key4+512,key5+512, key6+512, key7+512, key8+512 FROM t1;
INSERT INTO t1 SELECT key1+1024, key2+1024, key3+1024, key4+1024,key5+1024, key6+1024, key7+1024, key8+1024 FROM t1;

# inserting null values.
INSERT INTO t1 VALUES (key1+5, key2+5, key3+5, key4+5,key5+5, NULL, key7+5, key8+5);
INSERT INTO t1 VALUES (key1+10, key2+10, key3+10, key4+10,key5+10, NULL, key7+10, key8+10);
INSERT INTO t1 VALUES (key1+20, key2+20, key3+20, key4+20,key5+20, NULL, key7+20, key8+20);
INSERT INTO t1 VALUES (key1+40, key2+40, key3+40, key4+40,key5+40, NULL, key7+40, key8+40);
INSERT INTO t1 VALUES (key1+80, key2+80, key3+80, key4+80,key5+80, NULL, key7+80, key8+80);

INSERT INTO t1 VALUES (key1+6, key2+6, key3+6, key4+6, NULL, key6+6, key7+6, key8+6);
INSERT INTO t1 VALUES (key1+12, key2+12, key3+12, key4+12, NULL, key6+12, key7+12, key8+12);
INSERT INTO t1 VALUES (key1+24, key2+24, key3+24, key4+24, NULL, key6+24, key7+24, key8+24);
INSERT INTO t1 VALUES (key1+48, key2+48, key3+48, key4+48, NULL, key6+48, key7+48, key8+48);

--enable_query_log

# The following statement analyzes and
# stores the key distribution for a table.

ANALYZE TABLE t1;

#
# DELETE Statements
#

# The include file works as intended only when index_merge_single_col_setup.inc
# or index_merge_multi_col_setup.inc is used. The table t1 set-up is done in 
# these two include files.

DROP TABLE IF EXISTS t2;

CREATE TABLE t2 LIKE t1;
INSERT INTO t2 SELECT * FROM t1;
ANALYZE TABLE t2;

#1. SQL statments with various combinations of comparison operators

# union and sort_union 

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1=25 OR key4=10;
SELECT COUNT(*) FROM t1 WHERE key1=25 OR key4=10;
DELETE FROM t1 WHERE key1=25 OR key4=10;
SELECT COUNT(*) FROM t1 WHERE key1=25 OR key4=10;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
SELECT COUNT(*) FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
DELETE FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
SELECT COUNT(*) FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key3=1025 OR key5 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=1025 OR key5 IS NULL;
DELETE FROM t1 WHERE key3=1025 OR key5 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=1025 OR key5 IS NULL;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
DELETE FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;

ANALYZE TABLE t1;

--replace_result "i4,i1,i3" "i4,i1" "4,4,4" "4,4" "union(i4,intersect(i1,i3))" "union(i4,i1)"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
SELECT COUNT(*) FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
DELETE FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
SELECT COUNT(*) FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);

--replace_result "i1,i2" "i2,i1"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<2 OR key2<3;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3;
DELETE FROM t1 WHERE key1<2 OR key2<3;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3;

--replace_result "i1,i3" "i3,i1"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<5 OR key3<7;
SELECT COUNT(*) FROM t1 WHERE key1<5 OR key3<7;
DELETE FROM t1 WHERE key1<5 OR key3<7;
SELECT COUNT(*) FROM t1 WHERE key1<5 OR key3<7;

INSERT INTO t1 VALUES (10,10,10,10,10,10,10,10),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;

INSERT INTO t1 VALUES (10,10,10,10,10,10,10,10),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;

INSERT INTO t1 VALUES (1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2),(3,3,3,3,3,3,3,3),(4,4,4,4,4,4,4,4);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
SELECT COUNT(*) FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
DELETE FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
SELECT COUNT(*) FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
SELECT COUNT(*) FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
DELETE FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
SELECT COUNT(*) FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
SELECT COUNT(*) FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
DELETE FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
SELECT COUNT(*) FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;

#2. Statements with ORDER BY

INSERT INTO t1 VALUES (1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
DELETE FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;

#3. Multi table SQL statements 

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 USING t1 INNER JOIN t2 ON (t2.key1=t2.key1) WHERE t1.key1=3 OR t1.key2=4;
SELECT COUNT(*) FROM t1;
DELETE FROM t1 USING t1 INNER JOIN t2 ON (t2.key1=t2.key1) WHERE t1.key1=3 OR t1.key2=4;
SELECT COUNT(*) FROM t1;

# Statements with subqueries

#--replace_column 10 #
#EXPLAIN DELETE FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
SELECT COUNT(*) FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
DELETE FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
SELECT COUNT(*) FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;

#--replace_column 10 #
#EXPLAIN DELETE FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
SELECT COUNT(*) FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
DELETE FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
SELECT COUNT(*) FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));

INSERT INTO t1 VALUES (2,2,2,2,2,2,2,2),(5,5,5,5,5,5,5,5);
# Disabling binary logging temporarily as optimized delete is not used when log-bin is enabled in row mode
--disable_query_log
SET @save_log_bin= @@sql_log_bin;
SET SQL_LOG_BIN=0;
--enable_query_log
# Not stable across platforms. Plan needs to have index-merge access method.
# But only on solaris debug builds optimizer chooses a table_scan.  Hence
# masking the output for now.
#--replace_column 5 # 6 # 7 # 8 # 9 # 10 # 11 # 12 #
#EXPLAIN DELETE FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);

--disable_query_log
SET @save_log_bin= @@sql_log_bin;
SET SQL_LOG_BIN=0;
--enable_query_log

SELECT COUNT(*) FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);
DELETE FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);
SELECT COUNT(*) FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);

# The following statement uses index_merge optimization only when the table is 
# created with multi column setup. 

INSERT INTO t1 VALUES ( 3,3,3,3,3,3,3,3 ),(4,4,4,4,4,4,4,4);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key7 = 3 OR key8 = 4;
SELECT COUNT(*) FROM t1 WHERE key7 = 3 OR key8 = 4;
DELETE FROM t1 WHERE key7 = 3 OR key8 = 4;
SELECT COUNT(*) FROM t1 WHERE key7 = 3 OR key8 = 4;

#
# end of DELETE statements 
#



DROP TABLE IF EXISTS t1;

CREATE TABLE t1
(
  key1 INT NOT NULL,
  key2 INT NOT NULL,
  key3 INT NOT NULL,
  key4 INT NOT NULL,
  key5 INT,
  key6 INT,
  key7 INT NOT NULL,
  key8 INT NOT NULL,
  INDEX i1(key1,key2),
  INDEX i2(key2,key1),
  INDEX i3(key3,key4),
  INDEX i4(key4,key3),
  INDEX i5(key5,key6),
  INDEX i6(key6,key5),
  INDEX i7(key7,key8),
  INDEX i8(key8,key7)
);

--disable_query_log


# inserting values

INSERT INTO t1 VALUES ( 1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2);

# inserting values 

INSERT INTO t1 VALUES ( 1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2);

INSERT INTO t1 SELECT key1+2, key2+2, key3+2, key4+2,key5+2, key6+2, key7+2, key8+2 FROM t1;
INSERT INTO t1 SELECT key1+4, key2+4, key3+4, key4+4,key5+4, key6+4, key7+4, key8+4 FROM t1;
INSERT INTO t1 SELECT key1+8, key2+8, key3+8, key4+8,key5+8, key6+8, key7+8, key8+8 FROM t1;
INSERT INTO t1 SELECT key1+16, key2+16, key3+16, key4+16,key5+16, key6+16, key7+16, key8+16 FROM t1;
INSERT INTO t1 SELECT key1+32, key2+32, key3+32, key4+32,key5+32, key6+32, key7+32, key8+32 FROM t1;
INSERT INTO t1 SELECT key1+64, key2+64, key3+64, key4+64,key5+64, key6+64, key7+64, key8+64 FROM t1;
INSERT INTO t1 SELECT key1+128, key2+128, key3+128, key4+128,key5+128, key6+128, key7+128, key8+128 FROM t1;
INSERT INTO t1 SELECT key1+256, key2+256, key3+256, key4+256,key5+256, key6+256, key7+256, key8+256 FROM t1;
INSERT INTO t1 SELECT key1+512, key2+512, key3+512, key4+512,key5+512, key6+512, key7+512, key8+512 FROM t1;
INSERT INTO t1 SELECT key1+1024, key2+1024, key3+1024, key4+1024,key5+1024, key6+1024, key7+1024, key8+1024 FROM t1;

# inserting null values.
INSERT INTO t1 VALUES (key1+5, key2+5, key3+5, key4+5,key5+5, NULL, key7+5, key8+5);
INSERT INTO t1 VALUES (key1+10, key2+10, key3+10, key4+10,key5+10, NULL, key7+10, key8+10);
INSERT INTO t1 VALUES (key1+20, key2+20, key3+20, key4+20,key5+20, NULL, key7+20, key8+20);
INSERT INTO t1 VALUES (key1+40, key2+40, key3+40, key4+40,key5+40, NULL, key7+40, key8+40);
INSERT INTO t1 VALUES (key1+80, key2+80, key3+80, key4+80,key5+80, NULL, key7+80, key8+80);

INSERT INTO t1 VALUES (key1+6, key2+6, key3+6, key4+6, NULL, key6+6, key7+6, key8+6);
INSERT INTO t1 VALUES (key1+12, key2+12, key3+12, key4+12, NULL, key6+12, key7+12, key8+12);
INSERT INTO t1 VALUES (key1+24, key2+24, key3+24, key4+24, NULL, key6+24, key7+24, key8+24);
INSERT INTO t1 VALUES (key1+48, key2+48, key3+48, key4+48, NULL, key6+48, key7+48, key8+48);

--enable_query_log

# To analyze and store the key distribution of the table.

ANALYZE TABLE t1;

#
# DELETE Statements
#

# The include file works as intended only when index_merge_single_col_setup.inc
# or index_merge_multi_col_setup.inc is used. The table t1 set-up is done in 
# these two include files.

DROP TABLE IF EXISTS t2;

CREATE TABLE t2 LIKE t1;
INSERT INTO t2 SELECT * FROM t1;
ANALYZE TABLE t2;

#1. SQL statments with various combinations of comparison operators

# union and sort_union 

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1=25 OR key4=10;
SELECT COUNT(*) FROM t1 WHERE key1=25 OR key4=10;
DELETE FROM t1 WHERE key1=25 OR key4=10;
SELECT COUNT(*) FROM t1 WHERE key1=25 OR key4=10;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
SELECT COUNT(*) FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
DELETE FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;
SELECT COUNT(*) FROM t1 WHERE key1=48 OR  key4=2 OR key6=3;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key3=1025 OR key5 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=1025 OR key5 IS NULL;
DELETE FROM t1 WHERE key3=1025 OR key5 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=1025 OR key5 IS NULL;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
DELETE FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key3=45 OR key1=6 OR key6 IS NULL;

ANALYZE TABLE t1;

--replace_result "i4,i1,i3" "i4,i1" "4,4,4" "4,4" "union(i4,intersect(i1,i3))" "union(i4,i1)"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
SELECT COUNT(*) FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
DELETE FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);
SELECT COUNT(*) FROM t1 WHERE (key4=42 AND key6 IS NOT NULL) OR (key1=4 AND key3=6);

--replace_result "i1,i2" "i2,i1"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<2 OR key2<3;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3;
DELETE FROM t1 WHERE key1<2 OR key2<3;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3;

--replace_result "i1,i3" "i3,i1"
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<5 OR key3<7;
SELECT COUNT(*) FROM t1 WHERE key1<5 OR key3<7;
DELETE FROM t1 WHERE key1<5 OR key3<7;
SELECT COUNT(*) FROM t1 WHERE key1<5 OR key3<7;

INSERT INTO t1 VALUES (10,10,10,10,10,10,10,10),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 IS NULL;

INSERT INTO t1 VALUES (10,10,10,10,10,10,10,10),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
DELETE FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;
SELECT COUNT(*) FROM t1 WHERE key2=10 OR key3=3 OR key4 <=> null;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40);

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
DELETE FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);
SELECT COUNT(*) FROM t1 WHERE (key1>30 AND key1<35) OR (key2>32 AND key2<40) OR (key3>20 AND key3<45);

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
DELETE FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;
SELECT COUNT(*) FROM t1 WHERE key1 BETWEEN 30 AND 35 OR key2 BETWEEN 32 AND 40 OR key3 BETWEEN 20 AND 45;

INSERT INTO t1 VALUES (1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2),(3,3,3,3,3,3,3,3),(4,4,4,4,4,4,4,4);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
SELECT COUNT(*) FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
DELETE FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));
SELECT COUNT(*) FROM t1 WHERE ((key3<4 OR key5<3) AND (key1<3 OR key2<3)) OR (((key3<5 AND key6<5) OR key5<2) AND (key5<4 OR key6<4));

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
SELECT COUNT(*) FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
DELETE FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;
SELECT COUNT(*) FROM t1 WHERE (key4<42 AND key6 IS NOT NULL) OR (key1>4 AND key5 IS NULL) AND key2<>50;

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
SELECT COUNT(*) FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
DELETE FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;
SELECT COUNT(*) FROM t1 WHERE (key5 IN (15,70) OR key6 IN (15,70)) ;

#2. Statements with ORDER BY

INSERT INTO t1 VALUES (1,1,1,1,1,1,1,1),(2,2,2,2,2,2,2,2),(3,3,3,3,3,3,3,3);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
DELETE FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;
SELECT COUNT(*) FROM t1 WHERE key1<2 OR key2<3 ORDER BY key1;

#3. Multi table SQL statements 

#--replace_column 10 #
#EXPLAIN DELETE FROM t1 USING t1 INNER JOIN t2 ON (t2.key1=t2.key1) WHERE t1.key1=3 OR t1.key2=4;
SELECT COUNT(*) FROM t1;
DELETE FROM t1 USING t1 INNER JOIN t2 ON (t2.key1=t2.key1) WHERE t1.key1=3 OR t1.key2=4;
SELECT COUNT(*) FROM t1;

# Statements with subqueries

#--replace_column 10 #
#EXPLAIN DELETE FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
SELECT COUNT(*) FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
DELETE FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;
SELECT COUNT(*) FROM t2 WHERE key6 = (SELECT key6 FROM t1 WHERE key1=10 OR key5=3 OR key2 IS NULL) OR key3=28 OR key4=10;

#--replace_column 10 #
#EXPLAIN DELETE FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
SELECT COUNT(*) FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
DELETE FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));
SELECT COUNT(*) FROM t2 WHERE key1=25 OR key4=40 AND (key4 < SOME (SELECT key4 FROM t1 WHERE key1<5 OR key4<8) OR key1 < ANY (SELECT key1 FROM t1 WHERE key1<5 OR key4<7));

INSERT INTO t1 VALUES (2,2,2,2,2,2,2,2),(5,5,5,5,5,5,5,5);
# Disabling binary logging temporarily as optimized delete is not used when log-bin is enabled in row mode
--disable_query_log
SET @save_log_bin= @@sql_log_bin;
SET SQL_LOG_BIN=0;
--enable_query_log
# Not stable across platforms. Plan needs to have index-merge access method.
# But only on solaris debug builds optimizer chooses a table_scan.  Hence
# masking the output for now.
#--replace_column 5 # 6 # 7 # 8 # 9 # 10 # 11 # 12 #
#EXPLAIN DELETE FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);

--disable_query_log
SET @save_log_bin= @@sql_log_bin;
SET SQL_LOG_BIN=0;
--enable_query_log

SELECT COUNT(*) FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);
DELETE FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);
SELECT COUNT(*) FROM t2 WHERE EXISTS (SELECT * FROM t1 WHERE key1<5 OR key3<7);

# The following statement uses index_merge optimization only when the table is 
# created with multi column setup. 

INSERT INTO t1 VALUES ( 3,3,3,3,3,3,3,3 ),(4,4,4,4,4,4,4,4);
#--replace_column 10 #
#EXPLAIN DELETE FROM t1 WHERE key7 = 3 OR key8 = 4;
SELECT COUNT(*) FROM t1 WHERE key7 = 3 OR key8 = 4;
DELETE FROM t1 WHERE key7 = 3 OR key8 = 4;
SELECT COUNT(*) FROM t1 WHERE key7 = 3 OR key8 = 4;

#
# end of DELETE statements 
#



DROP TABLE if exists t1;
DROP TABLE if exists t2;


set @@tidb_enable_index_merge = off;
--enable_warnings
